{
  "components": {
    "ActionIcon": {
      "demosPath": "@lobehub/ui-rn/ActionIcon/demos",
      "name": "ActionIcon",
      "readme": "# ActionIcon 操作图标组件\n\n用于在界面中展示可点击的图标按钮，支持尺寸、变体、加载和禁用状态等配置，适合放在工具栏、卡片或列表中。\n\n## 功能特性\n\n- ✅ 支持三种内置尺寸，以及自定义尺寸\n- ✅ 提供 borderless / filled / outlined 三种视觉变体\n- ✅ 内置 Lucide LoaderCircle 加载动画\n- ✅ 支持禁用状态和点击反馈\n- ✅ 图标可传入组件或 ReactNode\n- ✅ 支持自定义图标颜色\n- ✅ TypeScript 完整类型定义\n\n## 基础使用\n\n```tsx\nimport { ActionIcon } from '@lobehub/ui-rn';\nimport { MoreHorizontal } from 'lucide-react-native';\n\n<ActionIcon icon={MoreHorizontal} onPress={() => console.log('more')} />;\n\n// 尺寸\n<ActionIcon icon={MoreHorizontal} size=\"small\" />;\n<ActionIcon icon={MoreHorizontal} size=\"middle\" />;\n<ActionIcon icon={MoreHorizontal} size=\"large\" />;\n<ActionIcon icon={MoreHorizontal} size={28} />;\n\n// 变体\n<ActionIcon icon={MoreHorizontal} variant=\"borderless\" />;\n<ActionIcon icon={MoreHorizontal} variant=\"filled\" />;\n<ActionIcon icon={MoreHorizontal} variant=\"outlined\" />;\n\n// 加载与禁用\n<ActionIcon icon={MoreHorizontal} loading />;\n<ActionIcon icon={MoreHorizontal} disabled />;\n\n// 自定义颜色\n<ActionIcon color=\"#F97316\" icon={MoreHorizontal} />;\n```\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| icon | \\`React.ComponentType<{ color?: string; size?: number }> \\\\| React.ReactNode\\` | - | 要渲染的图标，可以是组件或节点 |\n| color | \\`ColorValue\\` | - | 自定义图标颜色 |\n| loading | \\`boolean\\` | \\`false\\` | 是否展示加载动画 |\n| disabled | \\`boolean\\` | \\`false\\` | 是否禁用点击 |\n| size | \\`number \\\\| 'small' \\\\| 'middle' \\\\| 'large' \\\\| IconSizeConfig\\` | \\`'middle'\\` | 图标尺寸配置 |\n| variant | \\`'borderless' \\\\| 'filled' \\\\| 'outlined'\\` | \\`'borderless'\\` | 视觉风格 |\n| style | \\`PressableProps['style']\\` | - | 自定义样式 |\n| onPress | \\`() => void\\` | - | 点击回调 |\n\n## 使用场景\n\n- 工具栏中的快捷操作\n- 列表项右侧的更多操作入口\n- 卡片或弹窗中的次级操作按钮\n- 自定义的图标按钮集合\n"
    },
    "Alert": {
      "demosPath": "@lobehub/ui-rn/Alert/demos",
      "name": "Alert",
      "readme": "# Alert 提示组件\n\n基于 Ant Design Alert 设计的 React Native 提示组件，用于展示重要的操作反馈信息。\n\n## 功能特性\n\n- ✅ 支持 \\`info\\`、\\`success\\`、\\`warning\\`、\\`error\\` 四种状态样式\n- ✅ 允许展示说明文本、操作按钮与自定义图标\n- ✅ 支持可关闭提示以及关闭回调\n- ✅ 主题适配，自动继承语义色\n- ✅ 完整的 TypeScript 类型定义\n\n## 基础使用\n\n```tsx\nimport { Alert } from '@lobehub/ui-rn';\n\n<Alert message=\"默认提醒\" />\n\nimport { Alert, Button, Icon } from '@lobehub/ui-rn';\nimport { Info } from 'lucide-react-native';\n\n<Alert\n  description=\"支持描述信息，适用于需要提供额外说明的场景。\"\n  message=\"信息提示\"\n/>\n```\n\n## 类型示例\n\n```tsx\n<Alert message=\"信息提示\" type=\"info\" />\n<Alert message=\"成功提示\" type=\"success\" />\n<Alert message=\"警告提示\" type=\"warning\" />\n<Alert message=\"错误提示\" type=\"error\" />\n```\n\n## 可关闭\n\n```tsx\n<Alert closable message=\"操作成功\" type=\"success\" />\n\n<Alert\n  closable\n  description=\"提示信息在关闭时会触发 onClose 回调。\"\n  message=\"需要操作的提示\"\n  onClose={() => console.log('Alert closed')}\n/>\n```\n\n## 自定义图标与操作\n\n```tsx\n<Alert\n  action={<Button size=\"small\" type=\"primary\">查看详情</Button>}\n  description=\"可以将操作按钮放置在提示内部，引导用户下一步操作。\"\n  icon={<Icon icon={Info} size={20} />}\n  message=\"自定义内容\"\n  type=\"info\"\n/>\n```\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| \\`message\\` | \\`ReactNode\\` | (必填) | 提示标题内容 |\n| \\`description\\` | \\`ReactNode\\` | - | 额外的描述内容 |\n| \\`type\\` | \\`'info' \\\\| 'success' \\\\| 'warning' \\\\| 'error'\\` | \\`'info'\\` | 提示的语义类型 |\n| \\`showIcon\\` | \\`boolean\\` | \\`true\\` | 是否展示状态图标 |\n| \\`icon\\` | \\`ReactNode\\` | - | 自定义图标 |\n| \\`action\\` | \\`ReactNode\\` | - | 额外操作区域 |\n| \\`closable\\` | \\`boolean\\` | \\`false\\` | 是否显示关闭按钮 |\n| \\`closeIcon\\` | \\`IconRenderable\\` | - | 自定义关闭图标 |\n| \\`onClose\\` | \\`() => void\\` | - | 点击关闭时的回调 |\n| \\`style\\` | \\`StyleProp<ViewStyle>\\` | - | 容器样式 |\n"
    },
    "Avatar": {
      "demosPath": "@lobehub/ui-rn/Avatar/demos",
      "name": "Avatar",
      "readme": "# Avatar 头像组件\n\n可定制的头像组件，支持自定义尺寸、边框和错误处理。\n\n## 功能特性\n\n- ✅ 支持网络图片和本地图片\n- ✅ 自定义尺寸\n- ✅ 边框样式定制\n- ✅ 图片加载错误处理\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Avatar } from '@lobehub/ui-rn';\n\n// 基础用法\n<Avatar\n  avatar=\"https://github.com/lobehub.png\"\n  alt=\"LobeHub\"\n/>\n\n// 自定义尺寸\n<Avatar\n  avatar=\"https://github.com/lobehub.png\"\n  alt=\"LobeHub\"\n  size={48}\n/>\n\n// 添加边框\n<Avatar\n  avatar=\"https://github.com/lobehub.png\"\n  alt=\"LobeHub\"\n  size={48}\n  borderColor=\"#1677ff\"\n  borderWidth={2}\n/>\n```\n\n## API\n\n### AvatarProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| avatar | \\`string\\` | - | 头像图片URL |\n| alt | \\`string\\` | - | 图片描述文本 |\n| size | \\`number\\` | \\`40\\` | 头像尺寸 |\n| borderColor | \\`string\\` | - | 边框颜色 |\n| borderWidth | \\`number\\` | - | 边框宽度 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n"
    },
    "Block": {
      "demosPath": "@lobehub/ui-rn/Block/demos",
      "name": "Block",
      "readme": "# Block 块容器组件\n\n基于 Flexbox 的灵活容器组件，支持多种样式变体、阴影效果和玻璃效果，使用 class-variance-authority 进行样式管理。\n\n## 功能特性\n\n- ✅ 基于 Flexbox 的灵活布局\n- ✅ 多种样式变体（filled、outlined、borderless）\n- ✅ 支持阴影和玻璃效果\n- ✅ 可点击状态支持\n- ✅ 使用 class-variance-authority 进行样式变体管理\n- ✅ 完全兼容 React Native\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Block } from '@lobehub/ui-rn';\n\n// 基础用法\n<Block>\n  <Text>基础 Block</Text>\n</Block>\n\n// 不同变体\n<Block variant=\"filled\">\n  <Text>Filled Block</Text>\n</Block>\n\n<Block variant=\"outlined\">\n  <Text>Outlined Block</Text>\n</Block>\n\n<Block variant=\"borderless\">\n  <Text>Borderless Block</Text>\n</Block>\n\n// 带效果\n<Block shadow>\n  <Text>带阴影的 Block</Text>\n</Block>\n\n<Block glass>\n  <Text>玻璃效果 Block</Text>\n</Block>\n\n// 可点击\n<Block clickable onPress={() => console.log('clicked')}>\n  <Text>可点击的 Block</Text>\n</Block>\n\n// 组合效果\n<Block\n  variant=\"filled\"\n  shadow\n  glass\n  clickable\n  onPress={() => console.log('clicked')}\n>\n  <Text>组合效果 Block</Text>\n</Block>\n```\n\n## API\n\n### BlockProps\n\n| 属性      | 类型                               | 默认值      | 说明                           |\n| --------- | ---------------------------------- | ----------- | ------------------------------ |\n| variant   | \\`'filled' \\\\| 'outlined' \\\\| 'borderless'\\` | \\`'filled'\\` | 样式变体                       |\n| shadow    | \\`boolean\\`                          | \\`false\\`     | 是否显示阴影效果               |\n| glass     | \\`boolean\\`                          | \\`false\\`     | 是否添加玻璃效果               |\n| clickable | \\`boolean\\`                          | \\`false\\`     | 是否可点击（添加交互状态）     |\n| children  | \\`ReactNode\\`                        | -           | 子元素                         |\n| style     | \\`StyleProp<ViewStyle>\\`             | -           | 自定义样式                     |\n| onPress   | \\`() => void\\`                       | -           | 点击回调（仅在 clickable 时） |\n\n> Block 组件继承了 [Flexbox](./flexbox) 的所有属性，支持完整的 Flexbox 布局功能。\n\n## 样式变体\n\n### Filled（填充）\n默认变体，带有背景色填充。\n\n```tsx\n<Block variant=\"filled\">\n  <Text>Filled Block</Text>\n</Block>\n```\n\n### Outlined（轮廓）\n透明背景，带有边框。\n\n```tsx\n<Block variant=\"outlined\">\n  <Text>Outlined Block</Text>\n</Block>\n```\n\n### Borderless（无边框）\n完全透明，无边框。\n\n```tsx\n<Block variant=\"borderless\">\n  <Text>Borderless Block</Text>\n</Block>\n```\n\n## 效果组合\n\n### 阴影效果\n为 Block 添加阴影，增强层次感。\n\n```tsx\n<Block shadow>\n  <Text>带阴影的 Block</Text>\n</Block>\n```\n\n### 玻璃效果\n添加半透明背景，营造玻璃质感。\n\n```tsx\n<Block glass>\n  <Text>玻璃效果 Block</Text>\n</Block>\n```\n\n### 可点击状态\n启用点击交互，自动调整悬停状态样式。\n\n```tsx\n<Block clickable onPress={() => console.log('clicked')}>\n  <Text>可点击 Block</Text>\n</Block>\n```\n\n## CVA 样式管理\n\nBlock 组件使用自定义的 React Native CVA 来管理样式变体，CVA 配置位于 \\`style.ts\\` 文件中：\n\n```tsx\n// style.ts 文件中的 CVA 配置\nexport const useBlockVariants = (styles) =>\n  cva(styles.root, {\n    variants: {\n      variant: {\n        filled: styles.filled,\n        outlined: styles.outlined,\n        borderless: styles.borderless,\n      },\n      clickable: {\n        false: null,\n        true: styles.clickableRoot,\n      },\n    },\n    compoundVariants: [\n      {\n        clickable: true,\n        variant: 'filled',\n        style: styles.clickableFilled,\n      },\n    ],\n    defaultVariants: {\n      variant: 'filled',\n      clickable: false,\n    },\n  });\n\n// 在组件中使用\nconst { styles } = useStyles();\nconst blockVariants = useBlockVariants(styles);\nconst variantStyles = blockVariants({ variant, clickable });\n```\n\n### Style 文件模式优势\n\n1. **集中管理**: 样式和变体逻辑都在 style 文件中\n2. **主题集成**: 直接访问主题 token\n3. **类型安全**: 完整的 TypeScript 支持\n4. **易于维护**: 清晰的文件结构\n\n## 布局应用\n\n### 卡片容器\n```tsx\n<Block variant=\"filled\" shadow style={{ padding: 16 }}>\n  <Text style={{ fontWeight: 'bold' }}>卡片标题</Text>\n  <Text>卡片内容</Text>\n</Block>\n```\n\n### 交互按钮\n```tsx\n<Block\n  clickable\n  variant=\"outlined\"\n  onPress={() => handleAction()}\n  style={{ padding: 12 }}\n>\n  <Text>操作按钮</Text>\n</Block>\n```\n\n### 分组容器\n```tsx\n<Block variant=\"borderless\" direction=\"column\">\n  <Block variant=\"filled\" style={{ marginBottom: 8 }}>\n    <Text>项目 1</Text>\n  </Block>\n  <Block variant=\"filled\">\n    <Text>项目 2</Text>\n  </Block>\n</Block>\n```\n"
    },
    "Button": {
      "demosPath": "@lobehub/ui-rn/Button/demos",
      "name": "Button",
      "readme": "# Button 按钮组件\n\nReact Native版本的按钮组件，参考Ant Design设计，支持多种类型、尺寸和状态。\n\n## 功能特性\n\n- ✅ 多种按钮类型（Primary、Default、Dashed、Text、Link）\n- ✅ 三种尺寸（Small、Middle、Large）\n- ✅ 加载状态支持\n- ✅ 禁用状态支持\n- ✅ 图标支持（\\`icon\\` 属性）\n- ✅ 自定义样式支持\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Button } from '@lobehub/ui-rn';\n\n// 基础用法\n<Button onPress={() => console.log('clicked')}>\n  Default Button\n</Button>\n\n// Primary 按钮\n<Button type=\"primary\" onPress={() => console.log('clicked')}>\n  Primary Button\n</Button>\n\n// Dashed 按钮\n<Button type=\"dashed\" onPress={() => console.log('clicked')}>\n  Dashed Button\n</Button>\n\n// 不同尺寸\n<Button size=\"small\">Small</Button>\n<Button size=\"middle\">Middle</Button>\n<Button size=\"large\">Large</Button>\n\n// 加载状态\n<Button loading onPress={() => console.log('clicked')}>\n  Loading Button\n</Button>\n\n// 禁用状态\n<Button disabled onPress={() => console.log('clicked')}>\n  Disabled Button\n</Button>\n\n// 块级按钮\n<Button block onPress={() => console.log('clicked')}>\n  Block Button\n</Button>\n\\n// 图标按钮\nimport { Plus } from 'lucide-react-native';\n<Button icon={<Plus />} type=\"primary\">\n  Create\n</Button>\n\n// 圆形按钮\n<Button shape=\"circle\" type=\"primary\" icon={<Plus />} />\n```\n\n## API\n\n### ButtonProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| type | \\`'primary' \\\\| 'default' \\\\| 'dashed' \\\\| 'text' \\\\| 'link'\\` | \\`'default'\\` | 按钮类型 |\n| size | \\`'small' \\\\| 'middle' \\\\| 'large'\\` | \\`'middle'\\` | 按钮尺寸 |\n| shape | \\`'default' \\\\| 'circle'\\` | \\`'default'\\` | 按钮形状；circle 为正圆，适合图标按钮 |\n| loading | \\`boolean\\` | \\`false\\` | 是否加载中 |\n| disabled | \\`boolean\\` | \\`false\\` | 是否禁用 |\n| block | \\`boolean\\` | \\`false\\` | 是否为块级按钮 |\n| onPress | \\`() => void\\` | - | 点击回调 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n| textStyle | \\`TextStyle\\` | - | 文本样式 |\n| icon | \\`ReactNode\\` | - | 左侧图标；会自动匹配颜色与尺寸 |\n| children | \\`ReactNode\\` | - | 按钮内容 |\n\n## 按钮类型\n\n- \\`primary\\`: 主要按钮，用于主要操作\n- \\`default\\`: 默认按钮，用于次要操作\n- \\`text\\`: 文本按钮，用于轻量级操作\n- \\`link\\`: 链接按钮，用于跳转操作\n\n## 尺寸规格\n\n- \\`small\\`: 小尺寸（24px 高度）\n- \\`middle\\`: 中等尺寸（32px 高度）\n- \\`large\\`: 大尺寸（40px 高度）\n"
    },
    "CapsuleTabs": {
      "demosPath": "@lobehub/ui-rn/CapsuleTabs/demos",
      "name": "CapsuleTabs",
      "readme": "# CapsuleTabs 组件\n\n水平滚动的胶囊选项卡组件，支持自定义样式、图标组合和选择状态。\n\n## 功能特性\n\n- ✅ 胶囊样式的选项卡设计\n- ✅ 水平滚动支持\n- ✅ 选择状态管理\n- ✅ 图标和文本的组合展示\n- ✅ 自定义样式\n- ✅ 支持大 / 中 / 小三种尺寸\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Briefcase, Home } from 'lucide-react-native';\n\nimport { CapsuleTabs, CapsuleTabItem } from '@lobehub/ui-rn';\n\nconst items: CapsuleTabItem[] = [\n  { key: 'all', label: 'All', icon: Home },\n  { key: 'work', label: 'Work', icon: Briefcase },\n  { key: 'personal', label: 'Personal' },\n];\n\nconst [selectedKey, setSelectedKey] = useState('all');\n\n<CapsuleTabs\n  items={items}\n  selectedKey={selectedKey}\n  onSelect={setSelectedKey}\n/>\n```\n\n## 尺寸\n\n通过 \\`size\\` 属性可以快速切换组件高度与字号，提供 \\`large\\`、\\`middle\\` 和 \\`small\\` 三种预设。\n\n```tsx\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} size=\"large\" />\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} size=\"middle\" />\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} size=\"small\" />\n```\n\n## API\n\n### CapsuleTabsProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| items | \\`CapsuleTabItem[]\\` | - | 选项卡数据 |\n| selectedKey | \\`string\\` | - | 当前选中的选项卡key |\n| onSelect | \\`(key: string) => void\\` | - | 选择回调函数 |\n| size | \\`'large' | 'middle' | 'small'\\` | \\`'middle'\\` | 控制胶囊高度与字体大小 |\n| showsHorizontalScrollIndicator | \\`boolean\\` | \\`false\\` | 是否显示水平滚动条 |\n\n### CapsuleTabItem\n\n| 属性 | 类型 | 说明 |\n| --- | --- | --- |\n| key | \\`string\\` | 选项卡唯一标识 |\n| label | \\`string\\` | 选项卡显示文本 |\n| icon | \\`IconRenderable\\` | 可选，选项卡前置图标 |\n"
    },
    "Card": {
      "demosPath": "@lobehub/ui-rn/Card/demos",
      "name": "Card",
      "readme": "# Card 卡片组件\n\n用于展示分组信息的通用容器，支持标题与额外操作条、可选封面，以及 Block 的全部变体属性。\n\n## 功能特性\n\n- ✅ 标题与右侧额外操作共享一行排布\n- ✅ 可选封面区域，自动处理圆角裁剪\n- ✅ 内容插槽可放置任意 React Node\n- ✅ 支持可选分隔线、背景变体、阴影等 Block 能力\n- ✅ TypeScript 类型完备\n\n## 基础用法\n\n```tsx\nimport { Button, Card, Space, Tag } from '@lobehub/ui-rn';\nimport { Text } from 'react-native';\n\nexport default () => (\n  <Card\n    extra={<Tag color=\"processing\">Beta</Tag>}\n    title=\"Custom Server\"\n  >\n    <Text>自托管服务器允许将对话与模型设置同步到私有环境。</Text>\n    <Space size=\"small\">\n      <Button size=\"small\" type=\"default\">\n        Cancel\n      </Button>\n      <Button size=\"small\" type=\"primary\">\n        Apply\n      </Button>\n    </Space>\n  </Card>\n);\n```\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| \\`title\\` | \\`ReactNode\\` | - | 卡片标题，文本时自动使用主题排版 |\n| \\`extra\\` | \\`ReactNode\\` | - | 标题右侧的操作区 |\n| \\`cover\\` | \\`ReactNode\\` | - | 封面内容，位于卡片顶部并保留圆角 |\n| \\`divider\\` | \\`boolean\\` | \\`true\\` | 控制标题与内容之间分隔线 |\n\n> 其余属性继承自 [Block](../Block) 组件，包含 \\`variant\\`、\\`shadow\\`、\\`glass\\`、\\`onPress\\`、\\`padding\\` 等能力。\n\n## 分隔线控制\n\n分隔线默认开启，可通过布尔值整体关闭。\n\n```tsx\n<Card divider={false} title=\"无分隔线\">\n  <Text>标题与内容之间不会渲染分隔线。</Text>\n</Card>\n```\n\n## 封面配合\n\n```tsx\n<Card\n  cover={<Image source={{ uri: '...' }} style={{ height: 160 }} />}\n  title=\"带封面的卡片\"\n/>\n```\n\n封面区域会自动裁剪成圆角矩形，更适合作为图文卡片使用。\n"
    },
    "Center": {
      "demosPath": "@lobehub/ui-rn/Center/demos",
      "name": "Center",
      "readme": "# Center 居中组件\n\n用于将子元素在容器中居中显示的组件，支持水平居中、垂直居中或完全居中。\n\n## 功能特性\n\n- ✅ 简单的居中布局\n- ✅ 完全兼容 React Native\n- ✅ 支持单独控制水平和垂直居中\n- ✅ 支持设置最小尺寸\n- ✅ 内置测试 ID 支持\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Center } from '@lobehub/ui-rn';\n\n// 完全居中\n<Center>\n  <Component />\n</Center>\n\n// 只水平居中\n<Center horizontal={true} vertical={false}>\n  <Component />\n</Center>\n\n// 只垂直居中\n<Center horizontal={false} vertical={true}>\n  <Component />\n</Center>\n\n// 设置最小尺寸\n<Center minHeight={150} minWidth={200}>\n  <Component />\n</Center>\n\n// 填充模式\n<Center block style={{ height: 200 }}>\n  <Component />\n</Center>\n```\n\n## API\n\n### CenterProps\n\n| 属性       | 类型                   | 默认值  | 说明               |\n| ---------- | ---------------------- | ------- | ------------------ |\n| horizontal | \\`boolean\\`              | \\`true\\`  | 是否在水平方向居中 |\n| vertical   | \\`boolean\\`              | \\`true\\`  | 是否在垂直方向居中 |\n| block      | \\`boolean\\`              | \\`false\\` | 是否填充可用空间   |\n| minHeight  | \\`number \\\\| string\\`     | -       | 容器的最小高度     |\n| minWidth   | \\`number \\\\| string\\`     | -       | 容器的最小宽度     |\n| children   | \\`ReactNode\\`            | -       | 子元素             |\n| style      | \\`StyleProp<ViewStyle>\\` | -       | 自定义样式         |\n| testID     | \\`string\\`               | -       | 测试 ID            |\n\n## 使用场景\n\n### 完全居中\n适用于需要在容器中央显示内容的场景，如加载指示器、空状态提示等。\n\n```tsx\n<Center style={{ height: 200, backgroundColor: '#f0f0f0' }}>\n  <LoadingSpinner />\n</Center>\n```\n\n### 水平居中\n适用于需要在水平方向居中，但垂直位置固定的场景，如页面标题。\n\n```tsx\n<Center horizontal={true} vertical={false} style={{ height: 100 }}>\n  <Text>页面标题</Text>\n</Center>\n```\n\n### 垂直居中\n适用于需要在垂直方向居中，但水平位置固定的场景，如侧边栏内容。\n\n```tsx\n<Center horizontal={false} vertical={true} style={{ height: 100 }}>\n  <NavigationMenu />\n</Center>\n```\n\n### 多子元素居中\n当有多个子元素时，它们会在容器中整体居中显示。\n\n```tsx\n<Center>\n  <Text>标题</Text>\n  <Text>副标题</Text>\n  <Button title=\"操作按钮\" />\n</Center>\n```\n\n### 嵌套使用\n可以与其他布局组件配合使用，实现复杂的布局效果。\n\n```tsx\n<Center style={{ height: 300, backgroundColor: '#f5f5f5' }}>\n  <Center style={{ width: 200, height: 200, backgroundColor: 'white' }}>\n    <Text>嵌套居中内容</Text>\n  </Center>\n</Center>\n```\n"
    },
    "ColorScales": {
      "demosPath": "@lobehub/ui-rn/ColorScales/demos",
      "name": "ColorScales",
      "readme": "# ColorScales 色板组件\n\nReact Native版本的色板展示组件，基于 LobeUI 的 ColorScales 组件重写。\n\n## 功能特性\n\n- ✅ 展示完整的颜色级别\n- ✅ 支持 light/lightA/dark/darkA 四种模式\n- ✅ 高亮中间色级\n- ✅ 点击复制颜色值\n- ✅ 透明色支持\n- ✅ 垂直滚动支持（移动端优化）\n- ✅ TypeScript 支持\n- ✅ **新增：颜色级别 Token 自动生成**\n\n## 基础使用\n\n```tsx\nimport { ColorScales } from '@/theme/color';\nimport { colorScales } from '@/theme/color';\n\nexport default () => (\n  <ColorScales \n    name=\"primary\" \n    scale={colorScales.primary} \n    midHighLight={9} \n  />\n);\n```\n\n## 颜色级别 Token 使用\n\n现在你可以直接在组件中使用颜色级别 token：\n\n```tsx\nimport { useThemeToken } from '@/theme';\n\nconst MyComponent = () => {\n  const token = useThemeToken();\n  \n  return (\n    <View style={{\n      backgroundColor: token.primary1,     // 主色级别1\n      borderColor: token.red5,            // 红色级别5\n      shadowColor: token.blue3A,          // 蓝色级别3透明\n    }}>\n      <Text style={{ color: token.gray9 }}>\n        使用颜色级别 token\n      </Text>\n    </View>\n  );\n};\n```\n\n## 可用的 Token 格式\n\n- **基础色**: \\`token.{colorName}{level}\\` (例如: \\`token.primary5\\`)\n- **透明色**: \\`token.{colorName}{level}A\\` (例如: \\`token.red3A\\`)\n- **深色模式**: \\`token.{colorName}{level}Dark\\` (例如: \\`token.blue7Dark\\`)\n- **深色透明**: \\`token.{colorName}{level}DarkA\\` (例如: \\`token.green9DarkA\\`)\n\n其中：\n- \\`colorName\\`: primary, red, blue, green, cyan, geekblue, gold, gray, lime, magenta, orange, purple, volcano, yellow\n- \\`level\\`: 1-11\n\n## API\n\n### ColorScales\n\n| 属性 | 类型 | 默认值 | 描述 |\n| --- | --- | --- | --- |\n| name | \\`string\\` | - | 色板名称 |\n| scale | \\`ColorScaleItem\\` | - | 色板数据对象 |\n| midHighLight | \\`number\\` | - | 高亮的中间色级索引 |\n\n### ColorScaleItem\n\n```tsx\ninterface ColorScaleItem {\n  light: string[];   // 浅色模式颜色数组\n  lightA: string[];  // 浅色模式透明颜色数组\n  dark: string[];    // 深色模式颜色数组\n  darkA: string[];   // 深色模式透明颜色数组\n}\n```\n\n## 色板类型\n\n组件支持四种色板模式：\n\n- **light**: 浅色模式实色\n- **lightA**: 浅色模式透明色\n- **dark**: 深色模式实色  \n- **darkA**: 深色模式透明色\n\n## 交互功能\n\n- 点击任意色块可复制对应的 token 值\n- 复制格式：\\`token.colorName + index + (A?) /* #hex */\\`\n- 支持垂直滚动查看完整色板\n\n## 可用色板\n\n当前支持的色板包括：\n${Object.keys(colorScales)\n  .map((name) => `- ${name}`)\n  .join('\\n')}\n"
    },
    "ColorSwatches": {
      "demosPath": "@lobehub/ui-rn/ColorSwatches/demos",
      "name": "ColorSwatches",
      "readme": "# ColorSwatches 颜色选择器组件\n\nReact Native版本的颜色选择器组件，基于 LobeUI 的 ColorSwatches 组件重写。\n\n## 功能特性\n\n- ✅ 支持多种颜色预设\n- ✅ 圆形/方形两种样式\n- ✅ 可自定义尺寸和间距\n- ✅ 透明色支持\n- ✅ 选中状态显示\n- ✅ 可访问性支持\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { ColorSwatches } from '@lobehub/ui-rn';\n\n// 基础用法\n<ColorSwatches\n  colors={[\n    { color: '#ff0000', title: '红色' },\n    { color: '#00ff00', title: '绿色' },\n    { color: '#0000ff', title: '蓝色' },\n  ]}\n  onChange={(color) => console.log(color)}\n/>\n\n// 方形样式\n<ColorSwatches\n  colors={colors}\n  shape=\"square\"\n  size={28}\n  gap={8}\n  onChange={handleColorChange}\n/>\n\n// 透明色支持\n<ColorSwatches\n  colors={[\n    { color: 'rgba(0, 0, 0, 0)', title: '透明' },\n    { color: '#ff0000', title: '红色' },\n  ]}\n  onChange={handleColorChange}\n/>\n```\n\n## API\n\n### ColorSwatchesProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| colors | \\`ColorSwatchesItemType[]\\` | - | 颜色数组 |\n| value | \\`string\\` | - | 当前选中的颜色 |\n| defaultValue | \\`string\\` | - | 默认选中的颜色 |\n| onChange | \\`(color?: string) => void\\` | - | 颜色改变回调 |\n| size | \\`number\\` | \\`24\\` | 色块尺寸 |\n| shape | \\`'circle' \\\\| 'square'\\` | \\`'circle'\\` | 色块形状 |\n| gap | \\`number\\` | \\`6\\` | 色块间距 |\n| enableColorSwatches | \\`boolean\\` | \\`true\\` | 是否显示色块 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n\n### ColorSwatchesItemType\n\n| 属性 | 类型 | 说明 |\n| --- | --- | --- |\n| color | \\`string\\` | 颜色值 |\n| title | \\`ReactNode\\` | 颜色标题（用于无障碍） |\n| key | \\`string \\\\| number\\` | 唯一标识 |\n\n## 核心特性\n\n### 颜色系统集成\n\nColorSwatches 与项目的颜色系统完全集成，支持：\n- 预定义色彩调色板\n- 主题色适配\n- 深色模式支持\n\n### 透明色处理\n\n组件对透明色有特殊处理：\n- 自动检测透明色\n- 特殊样式标识透明色\n- 正确的对比色计算\n\n### 可访问性\n\n组件提供完善的可访问性支持：\n- 屏幕阅读器支持\n- 键盘导航\n- 色彩描述标签\n\n## 样式定制\n\n### 尺寸配置\n\n- \\`size\\`: 控制色块大小\n- \\`gap\\`: 控制色块间距\n- \\`shape\\`: 控制色块形状（圆形/方形）\n\n### 自定义样式\n\n通过 \\`style\\` prop 可以自定义容器样式：\n\n```tsx\n<ColorSwatches\n  colors={colors}\n  style={{\n    backgroundColor: '#f5f5f5',\n    padding: 10,\n    borderRadius: 8,\n  }}\n/>\n```\n"
    },
    "Flexbox": {
      "demosPath": "@lobehub/ui-rn/Flexbox/demos",
      "name": "Flexbox",
      "readme": "# Flexbox 弹性布局组件\n\n基于 React Native Flexbox 布局的容器组件，提供了简洁的 API 来控制子元素的排列和对齐方式。\n\n## 功能特性\n\n- ✅ 简洁的 Flexbox 属性封装\n- ✅ 完全兼容 React Native\n- ✅ 支持所有 Flexbox 布局属性\n- ✅ 支持自动换行和 flex 属性\n- ✅ 内置测试 ID 支持\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Flexbox } from '@lobehub/ui-rn';\n\n// 水平排列\n<Flexbox direction=\"row\" justify=\"center\" align=\"center\">\n  <Component1 />\n  <Component2 />\n  <Component3 />\n</Flexbox>\n\n// 垂直排列\n<Flexbox direction=\"column\" justify=\"space-between\">\n  <Component1 />\n  <Component2 />\n  <Component3 />\n</Flexbox>\n\n// 自动换行\n<Flexbox direction=\"row\" wrap=\"wrap\" justify=\"space-around\">\n  <Component1 />\n  <Component2 />\n  <Component3 />\n  <Component4 />\n</Flexbox>\n\n// 填充模式\n<Flexbox block direction=\"row\" justify=\"center\">\n  <Component1 />\n  <Component2 />\n</Flexbox>\n```\n\n## API\n\n### FlexboxProps\n\n| 属性      | 类型                   | 默认值         | 说明               |\n| --------- | ---------------------- | -------------- | ------------------ |\n| direction | \\`FlexDirection\\`        | \\`'column'\\`     | 主轴的方向         |\n| justify   | \\`JustifyContent\\`       | \\`'flex-start'\\` | 主轴上的对齐方式   |\n| align     | \\`AlignItems\\`           | \\`'stretch'\\`    | 交叉轴上的对齐方式 |\n| wrap      | \\`FlexWrap\\`             | \\`'nowrap'\\`     | 是否换行           |\n| flex      | \\`number\\`               | -              | flex 属性          |\n| block     | \\`boolean\\`              | \\`false\\`        | 是否填充可用空间   |\n| children  | \\`ReactNode\\`            | -              | 子元素             |\n| style     | \\`StyleProp<ViewStyle>\\` | -              | 自定义样式         |\n| testID    | \\`string\\`               | -              | 测试 ID            |\n\n### 类型定义\n\n```tsx\ntype FlexDirection = 'row' | 'column' | 'row-reverse' | 'column-reverse';\ntype JustifyContent =\n  | 'flex-start'\n  | 'flex-end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly';\ntype AlignItems = 'stretch' | 'flex-start' | 'flex-end' | 'center' | 'baseline';\ntype FlexWrap = 'nowrap' | 'wrap' | 'wrap-reverse';\n```\n\n## 布局方向\n\n- \\`row\\`: 水平排列，从左到右\n- \\`column\\`: 垂直排列，从上到下\n- \\`row-reverse\\`: 水平排列，从右到左\n- \\`column-reverse\\`: 垂直排列，从下到上\n\n## 对齐方式\n\n### 主轴对齐 (justify)\n- \\`flex-start\\`: 起始端对齐\n- \\`flex-end\\`: 末尾端对齐\n- \\`center\\`: 居中对齐\n- \\`space-between\\`: 两端对齐，项目之间间隔相等\n- \\`space-around\\`: 每个项目两侧间隔相等\n- \\`space-evenly\\`: 所有间隔都相等\n\n### 交叉轴对齐 (align)\n- \\`stretch\\`: 拉伸填满容器\n- \\`flex-start\\`: 起始端对齐\n- \\`flex-end\\`: 末尾端对齐\n- \\`center\\`: 居中对齐\n- \\`baseline\\`: 基线对齐\n"
    },
    "FluentEmoji": {
      "demosPath": "@lobehub/ui-rn/FluentEmoji/demos",
      "name": "FluentEmoji",
      "readme": "# FluentEmoji 表情符号组件\n\n微软 Fluent 风格的 3D 表情符号组件，支持自定义大小和回退。\n\n## 功能特性\n\n- ✅ Fluent 3D 表情符号设计\n- ✅ 自定义尺寸支持\n- ✅ 原始表情符号回退\n- ✅ 高质量图像渲染\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { FluentEmoji } from '@lobehub/ui-rn';\n\n// 基础用法\n<FluentEmoji emoji=\"😊\" size={40} />\n\n// 自定义尺寸\n<FluentEmoji emoji=\"🚀\" size={64} />\n\n// 使用原始表情符号\n<FluentEmoji emoji=\"🎁\" size={48} plainEmoji />\n\n// 错误回退\n<FluentEmoji emoji=\"🎨\" size={40} fallback=\"🎨\" />\n```\n\n## API\n\n### FluentEmojiProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| emoji | \\`string\\` | - | 表情符号字符 |\n| size | \\`number\\` | \\`24\\` | 表情符号尺寸 |\n| plainEmoji | \\`boolean\\` | \\`false\\` | 是否使用原始表情符号 |\n| fallback | \\`string\\` | - | 加载失败时的回退表情符号 |\n| style | \\`ImageStyle\\` | - | 图像样式 |\n\n## 设计理念\n\nFluentEmoji 组件提供了微软 Fluent 设计体系的 3D 表情符号，相比传统的平面表情符号，具有：\n\n- 更丰富的视觉层次\n- 更现代的设计风格\n- 更好的用户体验\n- 跨平台的一致性\n\n当 3D 表情符号加载失败时，会自动回退到原始的 Unicode 表情符号，确保功能的可用性。\n"
    },
    "Form": {
      "demosPath": "@lobehub/ui-rn/Form/demos",
      "name": "Form",
      "readme": "# Form 表单\n\nReact Native 版本的表单容器，参考 Ant Design 写法，支持：\n\n- \\`Form.Item\\` 字段注册、辅助文案、错误提示\n- 必填标记与校验规则（required、pattern、validator）\n- \\`Form.useForm\\` 自定义实例，提供 \\`validateFields\\`、\\`submit\\` 等方法\n- 自定义 \\`extra\\` 文案，用于与错误同时展示提示信息"
    },
    "Highlighter": {
      "demosPath": "@lobehub/ui-rn/Highlighter/demos",
      "name": "Highlighter",
      "readme": "# Highlighter 组件\n\n基于 Shiki 的高性能代码高亮组件，为 React Native 应用提供丰富的语法高亮功能。\n\n## 功能特性\n\n- ✅ 支持 100+ 种编程语言\n- ✅ 多种主题支持\n- ✅ 代码复制功能\n- ✅ 语言动态切换\n- ✅ 文件名显示\n- ✅ 展开/收起功能\n- ✅ 紧凑型和默认型显示\n- ✅ 自定义样式支持\n- ✅ TypeScript 支持\n- ✅ 高性能渲染\n\n## 快速开始\n\n```tsx\nimport { Highlighter } from '@lobehub/ui-rn';\n\n// 基础用法\n<Highlighter\n  code=\"console.log('Hello World');\"\n  lang=\"javascript\"\n/>\n```\n\n## API\n\n### HighlighterProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| code | \\`string\\` | - | 要高亮的代码内容 |\n| lang | \\`string\\` | \\`'markdown'\\` | 代码语言 |\n| fullFeatured | \\`boolean\\` | \\`false\\` | 是否启用完整功能模式 |\n| copyable | \\`boolean\\` | \\`true\\` | 是否显示复制按钮 |\n| showLanguage | \\`boolean\\` | \\`true\\` | 是否显示语言标识 |\n| fileName | \\`string\\` | - | 文件名（会覆盖语言标识） |\n| defalutExpand | \\`boolean\\` | \\`true\\` | 默认是否展开 |\n| type | \\`'default' \\\\| 'compact'\\` | \\`'default'\\` | 显示类型 |\n| allowChangeLanguage | \\`boolean\\` | \\`false\\` | 是否允许切换语言 |\n| style | \\`StyleProp<ViewStyle>\\` | - | 自定义容器样式 |\n\n## 功能模式对比\n\n### 基础模式 (\\`fullFeatured={false}\\`)\n\n- 纯代码高亮显示\n- 轻量级渲染\n- 适合简单的代码片段展示\n- 无交互功能\n\n### 完整功能模式 (\\`fullFeatured={true}\\`)\n\n- 包含头部工具栏\n- 支持代码复制\n- 支持展开/收起\n- 支持语言切换\n- 支持文件名显示\n- 适合完整的代码文档展示\n\n## 性能优化\n\n- **Token 缓存**: 自动缓存语法分析结果\n- **懒加载**: 按需加载语言定义\n- **内存管理**: 自动清理未使用的语言定义\n\n## 最佳实践\n\n### 1. 选择合适的模式\n```tsx\n// 文档展示：使用完整功能模式\n<Highlighter fullFeatured fileName=\"example.js\" />\n\n// 内联代码：使用基础模式\n<Highlighter code=\"const x = 1\" lang=\"js\" />\n\n// 命令行：使用紧凑模式\n<Highlighter type=\"compact\" lang=\"bash\" />\n```\n\n### 2. 优化用户体验\n```tsx\n// 长代码默认收起，让用户主动展开\n<Highlighter\n  defalutExpand={false}\n  fullFeatured\n  fileName=\"长文件名.js\"\n/>\n\n// 提供语言切换，方便调试\n<Highlighter\n  allowChangeLanguage\n  fullFeatured\n/>\n```\n"
    },
    "Icon": {
      "demosPath": "@lobehub/ui-rn/Icon/demos",
      "name": "Icon",
      "readme": "# Icon 图标组件\n\n用于封装常用的图标渲染逻辑，统一尺寸、旋转动画与颜色控制。支持直接传入 Lucide 图标组件或任意 React 节点，并可选开启旋转动画。\n\n## 功能特性\n\n- ✅ 默认适配 \\`lucide-react-native\\` 图标，同时支持传入自定义组件或节点\n- ✅ 统一的颜色与尺寸控制\n- ✅ 可选的旋转动画（\\`spin\\`）\n- ✅ TypeScript 类型提示友好\n- ✅ 可与 ActionIcon 等按钮类组件搭配使用\n\n## 基础使用\n\n```tsx\nimport { Icon } from '@lobehub/ui-rn';\nimport { Star } from 'lucide-react-native';\n\n<Icon icon={Star} />;\n<Icon icon={Star} size=\"large\" color=\"#FADB14\" />;\n<Icon icon={Star} spin />;\n\n// 也可以传入 React 节点\nimport { createElement } from 'react';\n\n<Icon icon={createElement(Star, { size: 20 })} />;\n```\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| icon | \\`LucideIcon \\\\| React.ComponentType<any> \\\\| React.ReactNode\\` | - | 要渲染的图标 |\n| size | \\`number \\\\| 'small' \\\\| 'middle' \\\\| 'large' \\\\| IconSizeConfig\\` | \\`'middle'\\` | 图标尺寸（宽高） |\n| color | \\`ColorValue\\` | - | 图标颜色，可覆盖主题色 |\n| spin | \\`boolean\\` | \\`false\\` | 是否启用旋转动画 |\n| style | \\`StyleProp<ViewStyle>\\` | - | 外层容器样式 |\n\n## 使用场景\n\n- 单独渲染图标展示状态\n- 作为 ActionIcon 或 Button 的补充构件\n- 在加载状态中展示旋转的提示图标\n- 与颜色面板搭配展示示例色彩\n"
    },
    "Input": {
      "demosPath": "@lobehub/ui-rn/Input/demos",
      "name": "Input",
      "readme": "# Input组件\n\n一个增强的React Native文本输入组件，支持前缀、后缀和复合组件。\n\n## 特性\n\n- ✅ **前缀支持** - 支持添加前缀图标或文本\n- ✅ **后缀支持** - 支持添加后缀图标或按钮\n- ✅ **复合组件** - 提供Search和Password专用组件\n- ✅ **统一样式** - 基于设计系统的一致性样式\n- ✅ **灵活布局** - 使用View包装实现灵活布局\n- ✅ **TypeScript** - 完整的TypeScript类型支持\n- ✅ **主题适配** - 自动适配明暗主题\n- ✅ **平台优化** - 针对Android和iOS的样式优化\n- ✅ **文本域支持** - 提供支持 autoSize 的 TextArea 多行输入\n\n## 基本用法\n\n### 1. 基础输入框\n\n```jsx\nimport { Input } from '@lobehub/ui-rn';\n\n<Input placeholder=\"请输入内容\" />\n<Input defaultValue=\"预设值\" />\n```\n\n### 2. 带前缀的输入框\n\n```jsx\nimport { Text } from 'react-native';\n\n<Input\n  placeholder=\"请输入用户名\"\n  prefix={<Text>@</Text>}\n/>\n```\n\n### 3. 带后缀的输入框\n\n```jsx\nimport { TouchableOpacity } from 'react-native';\n\n<Input\n  placeholder=\"输入邮箱前缀\"\n  suffix={<Text>@gmail.com</Text>}\n/>\n\n<Input\n  placeholder=\"输入消息\"\n  suffix={<TouchableOpacity><SendIcon /></TouchableOpacity>}\n/>\n```\n\n### 4. 复合组件\n\n```jsx\n// 搜索输入框\n<Input.Search placeholder=\"搜索内容...\" />\n\n// 密码输入框（自动切换显示/隐藏）\n<Input.Password placeholder=\"请输入密码\" />\n```\n\n### 5. 外观变体\n\n```jsx\n// 默认（filled）\n<Input placeholder=\"请输入内容\" />\n\n// 无底色（borderless）\n<Input variant=\"borderless\" placeholder=\"请输入内容\" />\n<Input.Search variant=\"borderless\" placeholder=\"搜索内容...\" />\n<Input.Password variant=\"borderless\" placeholder=\"请输入密码\" />\n\n// 描边（outlined）\n<Input variant=\"outlined\" placeholder=\"请输入内容\" />\n<Input.Search variant=\"outlined\" placeholder=\"搜索内容...\" />\n<Input.Password variant=\"outlined\" placeholder=\"请输入密码\" />\n```\n\n### 6. 尺寸大小\n\n```jsx\n// 小号\n<Input size=\"small\" placeholder=\"Small\" />\n<Input.Search size=\"small\" placeholder=\"Small Search\" />\n<Input.Password size=\"small\" placeholder=\"Small Password\" />\n\n// 中号（默认）\n<Input size=\"middle\" placeholder=\"Middle\" />\n<Input.Search size=\"middle\" placeholder=\"Middle Search\" />\n<Input.Password size=\"middle\" placeholder=\"Middle Password\" />\n\n// 大号\n<Input size=\"large\" placeholder=\"Large\" />\n<Input.Search size=\"large\" placeholder=\"Large Search\" />\n<Input.Password size=\"large\" placeholder=\"Large Password\" />\n```\n\n### 7. 自定义样式\n\n```jsx\n<Input\n  placeholder=\"自定义样式\"\n  style={{ backgroundColor: 'red' }}\n/>\n```\n\n### 8. 多行文本输入\n\n```jsx\n<Input.TextArea autoSize placeholder=\"请输入详细描述\" />\n\n<Input.TextArea\n  autoSize={{ minRows: 2, maxRows: 6 }}\n  placeholder=\"支持 autoSize 范围配置\"\n  variant=\"outlined\"\n/>\n\n<Input.TextArea\n  autoSize\n  placeholder=\"支持内容样式定制\"\n  style={{ backgroundColor: '#F7F8FA' }}\n/>\n```\n\n## API参考\n\n### InputProps\n\n| 属性 | 类型 | 描述 |\n|------|------|------|\n| \\`variant\\` | \\`'filled' | 'borderless' | 'outlined'\\` | 外观变体（默认 filled） |\n| \\`size\\` | \\`'large' | 'middle' | 'small'\\` | 尺寸大小（默认 middle） |\n| \\`prefix\\` | \\`React.ReactNode\\` | 前缀内容 |\n| \\`suffix\\` | \\`React.ReactNode\\` | 后缀内容 |\n| \\`style\\` | \\`StyleProp<ViewStyle>\\` | 外层容器样式 |\n| ...其他 | \\`RNTextInputProps\\` | React Native TextInput 的所有属性（不包含 multiline） |\n\n### TextAreaProps\n\n| 属性 | 类型 | 描述 |\n|------|------|------|\n| \\`autoSize\\` | \\`boolean | { minRows?: number; maxRows?: number }\\` | 控制高度自适应行为 |\n| \\`style\\` | \\`StyleProp<ViewStyle>\\` | 外层容器样式 |\n| \\`variant\\` | \\`'filled' | 'borderless' | 'outlined'\\` | 外观变体（默认 filled） |\n| ...其他 | \\`RNTextInputProps\\` | React Native TextInput 的所有属性（默认启用 multiline） |\n\n### 复合组件\n\n#### Input.Search\n搜索输入框，自动添加搜索图标前缀，returnKeyType设为search\n\n#### Input.Password\n密码输入框，自动添加眼睛图标后缀，支持切换显示/隐藏密码\n\n#### Input.TextArea\n多行文本输入框，默认开启 \\`multiline\\`，适合长文本场景\n\n## 设计原则\n\n- **一致性**：统一的外观和交互体验\n- **灵活性**：支持各种自定义需求\n- **易用性**：简单直观的API设计\n"
    },
    "InstantSwitch": {
      "demosPath": "@lobehub/ui-rn/InstantSwitch/demos",
      "name": "InstantSwitch",
      "readme": "# InstantSwitch 即时开关组件\n\nReact Native版本的即时开关组件，支持异步切换操作，参考web端InstantSwitch实现。\n\n## 功能特性\n\n- ✅ 异步切换操作支持\n- ✅ Loading状态管理\n- ✅ 乐观更新机制\n- ✅ 错误处理和回滚\n- ✅ 防重复点击\n- ✅ 三种尺寸支持\n- ✅ 自定义颜色\n- ✅ 禁用状态支持\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { InstantSwitch } from '@lobehub/ui-rn';\n\n// 基础用法\n<InstantSwitch\n  enabled={enabled}\n  onChange={async (enabled) => {\n    // 异步操作\n    await toggleProvider(id, enabled);\n  }}\n/>\n\n// 自定义颜色\n<InstantSwitch\n  enabled={enabled}\n  onChange={handleChange}\n  trackColor={{\n    false: '#ff6b6b',\n    true: '#51cf66',\n  }}\n  thumbColor=\"#ffffff\"\n  loadingColor=\"#339af0\"\n/>\n\n// 不同尺寸\n<InstantSwitch size=\"small\" />\n<InstantSwitch size=\"default\" />\n<InstantSwitch size=\"large\" />\n\n// 禁用状态\n<InstantSwitch disabled />\n```\n\n## API\n\n### InstantSwitchProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| enabled | \\`boolean\\` | - | 当前开关状态 |\n| onChange | \\`(enabled: boolean) => Promise<void>\\` | - | 异步切换回调 |\n| size | \\`'small' \\\\| 'default' \\\\| 'large'\\` | \\`'default'\\` | 开关尺寸 |\n| disabled | \\`boolean\\` | \\`false\\` | 是否禁用 |\n| trackColor | \\`{ false: string; true: string }\\` | - | 轨道颜色 |\n| thumbColor | \\`string\\` | - | 滑块颜色 |\n| loadingColor | \\`string\\` | - | Loading颜色 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n| trackStyle | \\`ViewStyle\\` | - | 轨道样式 |\n| thumbStyle | \\`ViewStyle\\` | - | 滑块样式 |\n\n## 核心特性\n\n### 异步操作处理\n\nInstantSwitch专门为异步操作设计，支持：\n- 异步切换回调\n- Loading状态显示\n- 乐观更新机制\n- 错误回滚处理\n\n### 乐观更新\n\n组件采用乐观更新策略：\n1. 用户点击后立即更新UI状态\n2. 后台执行异步操作\n3. 操作成功保持新状态\n4. 操作失败回滚到原状态\n\n### 防重复点击\n\n在异步操作进行中，组件会：\n- 禁用开关操作\n- 显示Loading指示器\n- 防止重复触发\n\n## 尺寸规格\n\n- \\`small\\`: 小尺寸（缩放0.8）\n- \\`default\\`: 默认尺寸（缩放1.0）\n- \\`large\\`: 大尺寸（缩放1.2）\n\n## 使用场景\n\n- 提供商启用/禁用\n- 功能开关控制\n- 设置项切换\n- 需要异步确认的操作\n"
    },
    "ListItem": {
      "demosPath": "@lobehub/ui-rn/ListItem/demos",
      "name": "ListItem",
      "readme": "# ListItem组件\n\n一个功能丰富的React Native列表项组件，支持头像、描述、额外内容显示和路由导航。\n\n## 特性\n\n- ✅ **灵活头像** - 支持图片URL、emoji、自定义React组件\n- ✅ **内容丰富** - 支持标题、描述、额外内容显示\n- ✅ **路由集成** - 与Expo Router深度集成，支持导航跳转\n- ✅ **交互响应** - 支持点击事件和触摸反馈\n- ✅ **响应式布局** - 自适应内容长度和屏幕尺寸\n- ✅ **暗色主题** - 现代化的暗色设计风格\n- ✅ **TypeScript** - 完整的TypeScript类型支持\n- ✅ **高性能** - 优化的渲染性能和内存使用\n- ✅ **自定义样式** - 灵活的样式配置选项\n- ✅ **文本截断** - 自动处理长文本的显示\n\n查看完整文档请切换到 README 选项卡。"
    },
    "Markdown": {
      "demosPath": "@lobehub/ui-rn/Markdown/demos",
      "name": "Markdown",
      "readme": "# Markdown组件\n\n一个功能强大的React Native Markdown渲染组件，支持数学公式、代码高亮、图片、视频等多种内容类型。\n\n## 特性\n\n- ✅ **数学公式渲染** - 支持MathJax数学公式显示\n- ✅ **代码高亮** - 集成自定义Highlighter组件\n- ✅ **图片自适应** - 自动计算图片高度，响应式显示\n- ✅ **视频支持** - 支持视频内容渲染\n- ✅ **表格支持** - 完整的表格样式和布局\n- ✅ **深色主题** - 自动适配暗色/亮色主题\n- ✅ **自定义样式** - 丰富的样式配置选项\n- ✅ **链接支持** - 可点击链接和自动跳转\n- ✅ **列表支持** - 有序列表和无序列表\n- ✅ **引用块** - 支持blockquote样式\n\n## 基本用法\n\n```jsx\nimport { Markdown } from '@lobehub/ui-rn';\n\nexport default function App() {\n  const markdownContent = \\`\n# 标题示例\n\n这是一个**粗体文本**和*斜体文本*示例。\n\n## 代码示例\n\n\\\\\\`\\\\\\`\\\\\\`javascript\nfunction hello() {\n  console.log('Hello World!');\n}\n\\\\\\`\\\\\\`\\\\\\`\n\n## 数学公式\n\n行内公式：$E = mc^2$\n\n块级公式：\n$$\\\\\\\\int_{-\\\\\\\\infty}^{\\\\\\\\infty} e^{-x^2} dx = \\\\\\\\sqrt{\\\\\\\\pi}$$\n  \\`;\n\n  return (\n    <Markdown content={markdownContent} />\n  );\n}\n```\n\n## API参考\n\n### Props\n\n| 属性 | 类型 | 默认值 | 描述 |\n|------|------|--------|------|\n| \\`content\\` | \\`string\\` | - | **必需** - 要渲染的Markdown内容 |\n| \\`fontSize\\` | \\`number\\` | \\`16\\` | 基础字体大小（px） |\n| \\`headerMultiple\\` | \\`number\\` | \\`1\\` | 标题字体大小倍数 |\n| \\`marginMultiple\\` | \\`number\\` | \\`1.5\\` | 边距倍数 |\n| \\`lineHeight\\` | \\`number\\` | \\`1.8\\` | 行高倍数 |\n\n## 支持的功能\n\n### 数学公式渲染\n基于MathJax引擎，支持复杂的数学表达式：\n- 行内公式：\\`$E = mc^2$\\`\n- 块级公式：\\`$$\\\\\\\\int_0^1 x^2 dx$$\\`\n\n### 代码高亮\n集成Highlighter组件，支持100+编程语言的语法高亮。\n\n### 图片和视频\n- 自动计算图片尺寸\n- 响应式适配\n- 支持视频内容\n\n### 表格支持\n完整的表格渲染和样式支持，包括边框、对齐等。\n\n更多详细信息请查看完整的README文档。\n"
    },
    "Skeleton": {
      "demosPath": "@lobehub/ui-rn/Skeleton/demos",
      "name": "Skeleton",
      "readme": "# Skeleton 骨架屏组件\n\nReact Native版本的骨架屏组件，参考Ant Design设计，用于页面加载状态显示。\n\n## 功能特性\n\n- ✅ 基础骨架屏显示\n- ✅ 头像骨架屏支持\n- ✅ 标题和段落骨架屏\n- ✅ 按钮骨架屏\n- ✅ 动画效果支持\n- ✅ 自定义行数和宽度\n- ✅ 加载状态控制\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Skeleton } from '@lobehub/ui-rn';\n\n// 基础用法\n<Skeleton />\n\n// 关闭动画\n<Skeleton animated={false} />\n\n// 加载完成显示内容\n<Skeleton loading={false}>\n  <Text>实际内容</Text>\n</Skeleton>\n\n// 带头像的骨架屏\n<Skeleton avatar />\n\n// 自定义头像\n<Skeleton avatar={{ size: 64, shape: 'square' }} />\n\n// 自定义段落\n<Skeleton paragraph={{ rows: 5 }} />\n\n// 自定义每行宽度\n<Skeleton\n  paragraph={{\n    width: ['100%', '90%', '75%', '50%']\n  }}\n/>\n\n// 使用复合组件\n<Skeleton.Avatar size={48} shape=\"circle\" />\n<Skeleton.Title width=\"80%\" />\n<Skeleton.Paragraph rows={4} />\n<Skeleton.Button />\n<Skeleton.Button block size=\"large\" />\n```\n\n## API\n\n### SkeletonProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| loading | \\`boolean\\` | \\`true\\` | 是否显示加载状态 |\n| avatar | \\`boolean | { size?: number; shape?: 'circle' | 'square' }\\` | \\`false\\` | 显示头像占位符 |\n| title | \\`boolean | { width?: number | string }\\` | \\`true\\` | 显示标题占位符 |\n| paragraph | \\`boolean | { rows?: number; width?: number | string | Array<number | string> }\\` | \\`true\\` | 显示段落占位符 |\n| animated | \\`boolean\\` | \\`true\\` | 是否显示动画效果 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n| children | \\`ReactNode\\` | - | 加载完成后显示的内容 |\n| backgroundColor | \\`string\\` | - | 自定义背景色 |\n| highlightColor | \\`string\\` | - | 自定义高亮色 |\n\n### Avatar 配置\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| size | \\`number\\` | \\`40\\` | 头像大小 |\n| shape | \\`'circle' | 'square'\\` | \\`'circle'\\` | 头像形状 |\n\n### Paragraph 配置\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| rows | \\`number\\` | \\`3\\` | 段落行数 |\n| width | \\`number | string | Array<number | string>\\` | - | 每行宽度，可以是数组指定每行不同宽度 |\n\n## 复合组件\n\n### Skeleton.Avatar\n\n独立的头像骨架屏组件。\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| size | \\`number\\` | \\`40\\` | 头像大小 |\n| shape | \\`'circle' | 'square'\\` | \\`'circle'\\` | 头像形状 |\n| animated | \\`boolean\\` | \\`false\\` | 是否显示动画效果 |\n| style | \\`ViewStyle\\` | - | 自定义样式 |\n| backgroundColor | \\`string\\` | - | 自定义背景色 |\n| highlightColor | \\`string\\` | - | 自定义高亮色 |\n\n### Skeleton.Title\n\n独立的标题骨架屏组件。\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| width | \\`number | string\\` | \\`'60%'\\` | 标题宽度 |\n| animated | \\`boolean\\` | \\`false\\` | 是否显示动画效果 |\n| style | \\`ViewStyle\\` | - | 自定义样式 |\n| backgroundColor | \\`string\\` | - | 自定义背景色 |\n| highlightColor | \\`string\\` | - | 自定义高亮色 |\n\n### Skeleton.Paragraph\n\n独立的段落骨架屏组件。\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| rows | \\`number\\` | \\`3\\` | 段落行数 |\n| width | \\`number | string | Array<number | string>\\` | - | 每行宽度，可以是数组指定每行不同宽度 |\n| animated | \\`boolean\\` | \\`false\\` | 是否显示动画效果 |\n| style | \\`ViewStyle\\` | - | 自定义样式 |\n| backgroundColor | \\`string\\` | - | 自定义背景色 |\n| highlightColor | \\`string\\` | - | 自定义高亮色 |\n\n### Skeleton.Button\n\n独立的按钮骨架屏组件。\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| size | \\`'small' | 'middle' | 'large'\\` | \\`'middle'\\` | 按钮高度尺寸 |\n| block | \\`boolean\\` | \\`false\\` | 是否占满整行宽度 |\n| shape | \\`'default' | 'circle'\\` | \\`'default'\\` | 按钮形状 |\n| width | \\`number | string\\` | \\`'50%'\\` | 按钮宽度（当非 block 且非圆形时生效） |\n| animated | \\`boolean\\` | \\`false\\` | 是否显示动画效果 |\n| style | \\`ViewStyle\\` | - | 自定义样式 |\n\n## 使用场景\n\n### 列表加载\n\n适合在列表数据加载时显示骨架屏，提升用户体验。\n\n### 卡片内容\n\n在卡片内容加载时显示对应的骨架屏结构。\n\n### 个人资料\n\n使用头像+文字的组合展示个人资料加载状态。\n\n### 文章内容\n\n使用标题+段落的组合展示文章内容加载状态。\n\n## 动画效果\n\n组件支持渐变动画效果，通过 \\`animated\\` 属性控制开启或关闭。动画使用 React Native Animated API 实现，性能优良。\n\n## 自定义样式\n\n可以通过 \\`backgroundColor\\` 和 \\`highlightColor\\` 属性自定义骨架屏的颜色，也可以通过 \\`style\\` 属性自定义容器样式。\n"
    },
    "Slider": {
      "demosPath": "@lobehub/ui-rn/Slider/demos",
      "name": "Slider",
      "readme": "# Slider 滑动输入条组件\n\nReact Native 版本的滑动输入条组件，支持自定义范围、步长和流畅的手势交互。\n\n## 功能特性\n\n- ✅ 流畅的拖拽手势交互\n- ✅ 自定义最小值、最大值和步长\n- ✅ 刻度标记支持（marks）\n- ✅ 仅刻度模式（step=null）\n- ✅ 受控和非受控模式\n- ✅ 完整的无障碍支持\n- ✅ 自定义样式（轨道和滑块）\n- ✅ 禁用状态支持\n- ✅ TypeScript 支持\n- ✅ 主题适配（深色/浅色模式）\n\n## 基础使用\n\n```tsx\nimport { Slider } from '@lobehub/ui-rn';\n\n// 基础用法\n<Slider\n  value={value}\n  onChange={setValue}\n  min={0}\n  max={100}\n  step={1}\n/>\n\n// 自定义范围和步长\n<Slider\n  value={price}\n  onChange={setPrice}\n  min={100}\n  max={2000}\n  step={50}\n/>\n\n// 非受控模式\n<Slider\n  defaultValue={30}\n  onChange={(value) => console.log('value:', value)}\n  min={0}\n  max={100}\n  step={5}\n/>\n\n// 禁用状态\n<Slider\n  value={value}\n  onChange={setValue}\n  disabled\n  min={0}\n  max={100}\n/>\n\n// 自定义样式\n<Slider\n  value={value}\n  onChange={setValue}\n  trackStyle={{ backgroundColor: '#ff6b35' }}\n  thumbStyle={{ backgroundColor: '#4ecdc4' }}\n/>\n\n// 刻度标记\n<Slider\n  value={value}\n  onChange={setValue}\n  min={0}\n  max={100}\n  marks={{\n    0: '0%',\n    25: '25%',\n    50: '50%',\n    75: '75%',\n    100: '100%'\n  }}\n/>\n\n// 仅刻度模式（只能选择标记的值）\n<Slider\n  value={level}\n  onChange={setLevel}\n  step={null}\n  marks={{\n    0: '低',\n    1: '中',\n    2: '高',\n    3: '极高'\n  }}\n/>\n```\n\n## API\n\n### SliderProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| value | \\`number\\` | - | 当前值（受控模式） |\n| defaultValue | \\`number\\` | \\`min\\` | 默认值（非受控模式） |\n| min | \\`number\\` | \\`0\\` | 最小值 |\n| max | \\`number\\` | \\`100\\` | 最大值 |\n| step | \\`number \\\\| null\\` | \\`1\\` | 步长，设为 null 时使用仅刻度模式 |\n| disabled | \\`boolean\\` | \\`false\\` | 是否禁用 |\n| marks | \\`Record<number, ReactNode \\\\| {label: ReactNode, style?: ViewStyle}>\\` | - | 刻度标记 |\n| onChange | \\`(value: number) => void\\` | - | 值改变时的回调 |\n| onChangeComplete | \\`(value: number) => void\\` | - | 拖拽结束时的回调 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n| trackStyle | \\`ViewStyle\\` | - | 轨道样式 |\n| thumbStyle | \\`ViewStyle\\` | - | 滑块样式 |\n| accessibilityLabel | \\`string\\` | - | 无障碍标签 |\n| accessibilityHint | \\`string\\` | - | 无障碍提示 |\n\n## 使用场景\n\n### 数值输入\n- 音量控制\n- 亮度调节\n- 价格范围选择\n- 温度设定\n\n### 进度控制\n- 播放进度\n- 下载进度\n- 任务完成度\n\n### 参数调节\n- 字体大小\n- 缩放比例\n- 透明度设置\n\n## 无障碍支持\n\n组件提供完整的无障碍功能支持：\n\n- \\`accessibilityRole=\"adjustable\"\\` 标识为可调节组件\n- \\`accessibilityValue\\` 提供当前值和范围信息\n- 支持屏幕阅读器\n- 支持自定义无障碍标签和提示\n\n## 手势交互\n\n- 使用 react-native-gesture-handler 提供流畅的拖拽体验\n- 支持精确的位置计算和边界限制\n- 实时反馈和平滑动画\n- 自动吸附到步长值\n\n## 主题适配\n\n组件使用项目的主题系统，自动适配：\n- 深色/浅色模式\n- 禁用状态颜色\n- 品牌色彩方案\n- 一致的设计规范\n"
    },
    "Space": {
      "demosPath": "@lobehub/ui-rn/Space/demos",
      "name": "Space",
      "readme": "# Space 间距组件\n\n设置组件之间的间距，支持水平/垂直布局、不同对齐方式和分隔符。\n\n## 功能特性\n\n- ✅ 水平和垂直方向间距\n- ✅ 预设间距大小（small、middle、large）\n- ✅ 自定义间距数值\n- ✅ 多种对齐方式（start、center、end、baseline）\n- ✅ 自动换行支持\n- ✅ 分隔符功能\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Space } from '@lobehub/ui-rn';\n\n// 基础用法\n<Space>\n  <Component1 />\n  <Component2 />\n  <Component3 />\n</Space>\n\n// 垂直间距\n<Space direction=\"vertical\">\n  <Component1 />\n  <Component2 />\n</Space>\n\n// 自定义间距大小\n<Space size=\"large\">\n  <Component1 />\n  <Component2 />\n</Space>\n\n// 对齐方式\n<Space align=\"center\">\n  <Component1 />\n  <Component2 />\n</Space>\n```\n\n## API\n\n### SpaceProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| children | \\`ReactNode\\` | - | 子组件 |\n| direction | \\`'horizontal' \\\\| 'vertical'\\` | \\`'horizontal'\\` | 间距方向 |\n| size | \\`'small' \\\\| 'middle' \\\\| 'large' \\\\| number\\` | \\`'small'\\` | 间距大小 |\n| align | \\`'start' \\\\| 'end' \\\\| 'center' \\\\| 'baseline'\\` | \\`'start'\\` | 对齐方式 |\n| wrap | \\`boolean\\` | \\`false\\` | 是否自动换行 |\n| split | \\`ReactNode\\` | - | 分隔符 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n"
    },
    "Switch": {
      "demosPath": "@lobehub/ui-rn/Switch/demos",
      "name": "Switch",
      "readme": "# Switch 开关\n\nReact Native \\`Switch\\` 的轻封装，内置主题配色（thumb/track）。\n\n## 基础使用\n\n\\`@lobehub/ui-rn\\` 提供的 \\`Switch\\` API 与 React Native 一致：\n\n```tsx\nimport React, { useState } from 'react';\nimport { Switch } from '@lobehub/ui-rn';\n\nexport default function Demo() {\n  const [checked, setChecked] = useState(false);\n  return <Switch value={checked} onValueChange={setChecked} />;\n}\n```\n\n## 主题配色\n- thumbColor: 使用 \\`token.colorTextLightSolid\\`\n- trackColor: \\`false: token.colorBgContainerDisabled\\`, \\`true: token.colorPrimary\\`\n\n如需自定义，仍可传入 React Native \\`Switch\\` 支持的同名属性覆盖。\n"
    },
    "Tag": {
      "demosPath": "@lobehub/ui-rn/Tag/demos",
      "name": "Tag",
      "readme": "# Tag 标签组件\n\n进行标记和分类的小标签组件，支持自定义样式。\n\n## 功能特性\n\n- ✅ 简洁的标签设计\n- ✅ 自定义样式支持\n- ✅ 灵活的文本样式\n- ✅ 自动换行布局\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## 基础使用\n\n```tsx\nimport { Tag } from '@lobehub/ui-rn';\n\n// 基础用法\n<Tag>React</Tag>\n\n// 自定义样式\n<Tag\n  style={{ backgroundColor: '#f0f2f5' }}\n  textStyle={{ color: '#1890ff' }}\n>\n  Custom Tag\n</Tag>\n\n// 多标签布局\n<View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 8 }}>\n  <Tag>React</Tag>\n  <Tag>TypeScript</Tag>\n  <Tag>JavaScript</Tag>\n</View>\n```\n\n## API\n\n### TagProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| children | \\`ReactNode\\` | - | 标签内容 |\n| style | \\`ViewStyle\\` | - | 容器样式 |\n| textStyle | \\`TextStyle\\` | - | 文本样式 |\n| onPress | \\`() => void\\` | - | 点击回调 |\n\n## 样式定制\n\n标签组件支持完全的样式定制，可以通过 \\`style\\` 和 \\`textStyle\\` 属性来自定义外观：\n\n- \\`style\\`: 控制标签容器的样式（背景色、边框、内边距等）\n- \\`textStyle\\`: 控制标签文本的样式（颜色、字体大小、字重等）\n"
    },
    "Text": {
      "demosPath": "@lobehub/ui-rn/Text/demos",
      "name": "Text",
      "readme": "# Text 文本组件\n\n用于显示文本的基础组件，提供丰富的样式和语义化选项。\n\n## 何时使用\n\n- 需要显示标题、段落等文本内容\n- 需要对文本进行语义化标记（成功、警告、危险等）\n- 需要对文本进行样式处理（加粗、斜体、下划线等）\n- 需要处理文本溢出和省略\n\n## 样式说明\n\n### 标签类型 (as)\n\n- \\`h1\\`: 38px, 加粗\n- \\`h2\\`: 30px, 加粗\n- \\`h3\\`: 24px, 加粗\n- \\`h4\\`: 20px, 加粗\n- \\`h5\\`: 16px, 加粗\n- \\`p\\`: 14px, 正常\n\n### 语义化类型 (type)\n\n- \\`secondary\\`: 次要文本色\n- \\`success\\`: 成功色（绿色）\n- \\`warning\\`: 警告色（橙色）\n- \\`danger\\`: 危险色（红色）\n- \\`info\\`: 信息色（蓝色）\n\n### 布尔属性\n\n- \\`strong\\`: 应用加粗字重\n- \\`italic\\`: 应用斜体样式\n- \\`underline\\`: 添加下划线\n- \\`delete\\`: 添加删除线\n- \\`mark\\`: 添加黄色背景高亮\n- \\`code\\`: 应用代码样式（等宽字体、浅灰背景）\n- \\`disabled\\`: 应用禁用样式（浅灰文本）\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| as | \\`'h1' \\\\| 'h2' \\\\| 'h3' \\\\| 'h4' \\\\| 'h5' \\\\| 'p'\\` | - | 标签类型，影响字号和字重 |\n| type | \\`'secondary' \\\\| 'success' \\\\| 'warning' \\\\| 'danger' \\\\| 'info'\\` | - | 语义化类型，影响颜色 |\n| strong | \\`boolean\\` | \\`false\\` | 是否加粗 |\n| italic | \\`boolean\\` | \\`false\\` | 是否斜体 |\n| underline | \\`boolean\\` | \\`false\\` | 是否下划线 |\n| delete | \\`boolean\\` | \\`false\\` | 是否删除线 |\n| mark | \\`boolean\\` | \\`false\\` | 是否标记/高亮 |\n| code | \\`boolean\\` | \\`false\\` | 是否代码样式 |\n| disabled | \\`boolean\\` | \\`false\\` | 是否禁用状态 |\n| color | \\`string\\` | - | 自定义文本颜色 |\n| weight | \\`TextStyle['fontWeight']\\` | - | 自定义字重 |\n| fontSize | \\`number\\` | - | 自定义字号 |\n| align | \\`'left' \\\\| 'center' \\\\| 'right' \\\\| 'justify' \\\\| 'auto'\\` | - | 文本对齐方式 |\n| ellipsis | \\`boolean \\\\| { rows?: number; suffix?: string }\\` | - | 省略号配置 |\n| numberOfLines | \\`number\\` | - | 限制行数 |\n| style | \\`TextStyle\\` | - | 自定义样式 |\n\n## 注意事项\n\n1. \\`as\\` 和自定义 \\`fontSize\\` 可以同时使用，自定义值会覆盖默认值\n2. \\`type\\` 和自定义 \\`color\\` 可以同时使用，自定义值会覆盖默认值\n3. \\`strong\\` 和自定义 \\`weight\\` 可以同时使用，自定义值会覆盖默认值\n4. \\`ellipsis\\` 会自动设置 \\`numberOfLines\\`，但显式设置的 \\`numberOfLines\\` 优先级更高\n5. 多个布尔属性可以组合使用（如 \\`strong\\` + \\`underline\\` + \\`italic\\`）"
    },
    "Toast": {
      "demosPath": "@lobehub/ui-rn/Toast/demos",
      "name": "Toast",
      "readme": "# Toast组件\n\n一个优雅的React Native Toast通知组件，支持多种类型的消息提示和动画效果。\n\n## 特性\n\n- ✅ **多种类型** - 支持success、error、info、loading四种类型\n- ✅ **优雅动画** - 流畅的滑入滑出动画效果\n- ✅ **自动消失** - 可配置的自动隐藏时间\n- ✅ **手动关闭** - 支持点击关闭和手动控制\n- ✅ **安全区域** - 自动适配安全区域，避免遮挡状态栏\n- ✅ **多实例管理** - 支持同时显示多个Toast\n- ✅ **暗色主题** - 现代化的暗色设计风格\n- ✅ **TypeScript** - 完整的TypeScript类型支持\n- ✅ **Context API** - 基于React Context的状态管理\n- ✅ **便捷API** - 简洁易用的调用接口\n\n## 基本用法\n\n### 1. 设置ToastProvider\n\n```jsx\nimport { ToastProvider } from '@lobehub/ui-rn';\n\nexport default function App() {\n  return (\n    <ToastProvider>\n      {/* 你的应用内容 */}\n      <YourAppContent />\n    </ToastProvider>\n  );\n}\n```\n\n### 2. 使用useToast Hook\n\n```jsx\nimport { useToast } from '@lobehub/ui-rn';\n\nexport default function MyComponent() {\n  const toast = useToast();\n\n  const showSuccess = () => {\n    toast.success('操作成功！');\n  };\n\n  const showError = () => {\n    toast.error('操作失败，请重试');\n  };\n\n  return (\n    <View>\n      <Button title=\"成功提示\" onPress={showSuccess} />\n      <Button title=\"错误提示\" onPress={showError} />\n    </View>\n  );\n}\n```\n\n## API参考\n\n### useToast Hook\n\n| 方法 | 类型 | 描述 |\n|------|------|------|\n| \\`show\\` | \\`(config: ToastConfig) => void\\` | 显示自定义配置的Toast |\n| \\`success\\` | \\`(message: string, duration?: number) => void\\` | 显示成功Toast |\n| \\`error\\` | \\`(message: string, duration?: number) => void\\` | 显示错误Toast |\n| \\`info\\` | \\`(message: string, duration?: number) => void\\` | 显示信息Toast |\n| \\`loading\\` | \\`(message: string, duration?: number) => void\\` | 显示加载Toast |\n| \\`hide\\` | \\`(id: string) => void\\` | 手动隐藏指定Toast |\n\n## 使用场景\n\n1. **成功反馈**：操作成功后的确认提示\n2. **错误提示**：操作失败或异常的警告\n3. **信息通知**：重要信息的提醒\n4. **加载状态**：长时间操作的进度提示\n\n更多详细信息请查看完整的README文档。\n"
    },
    "Tooltip": {
      "demosPath": "@lobehub/ui-rn/Tooltip/demos",
      "name": "Tooltip",
      "readme": "# Tooltip 组件\n\n参考 Ant Design 的 Tooltip 组件设计，为 React Native 应用提供功能完整的提示框组件。\n\n## 功能特性\n\n- ✅ 12种位置选择 (top, bottom, left, right 及其变体)\n- ✅ 智能位置计算和自动调整\n- ✅ 多种触发方式 (点击、长按、受控)\n- ✅ 流畅的动画效果\n- ✅ 自定义样式和内容\n- ✅ 箭头指向支持\n- ✅ 屏幕边界检测和位置回退\n- ✅ TypeScript 支持\n\n## 基础使用\n\n```tsx\nimport { Tooltip } from '@lobehub/ui-rn';\n\n// 基础用法\n<Tooltip title=\"这是一个提示信息\">\n  <TouchableOpacity style={styles.button}>\n    <Text>长按显示提示</Text>\n  </TouchableOpacity>\n</Tooltip>\n```\n\n## API\n\n### TooltipProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| title | \\`string \\\\| ReactNode\\` | - | 提示文字或自定义内容 |\n| children | \\`ReactNode\\` | - | 子组件 |\n| placement | \\`TooltipPlacement\\` | \\`'top'\\` | 气泡框位置 |\n| trigger | \\`TooltipTrigger\\` | \\`'longPress'\\` | 触发行为 |\n| arrow | \\`boolean\\` | \\`true\\` | 是否显示箭头 |\n| color | \\`string\\` | \\`'rgba(0, 0, 0, 0.85)'\\` | 背景颜色 |\n\n### TooltipPlacement\n\n支持12种位置：\n\n```tsx\ntype TooltipPlacement =\n  | 'top' | 'topLeft' | 'topRight'\n  | 'bottom' | 'bottomLeft' | 'bottomRight'\n  | 'left' | 'leftTop' | 'leftBottom'\n  | 'right' | 'rightTop' | 'rightBottom';\n```\n\n### TooltipTrigger\n\n```tsx\ntype TooltipTrigger = 'click' | 'longPress' | 'none';\n```\n"
    },
    "ThemeToken": {
      "demosPath": "@/components/theme/theme-token",
      "name": "ThemeToken",
      "readme": "# ThemeToken 主题令牌\n\n主题令牌展示组件，用于可视化和测试主题系统的各种 token 值。\n\n## 功能特性\n\n- ✅ 实时预览主题 token\n- ✅ 支持亮色/暗色主题切换\n- ✅ 可调整主色调和中性色\n- ✅ 显示完整的 token JSON\n- ✅ Token 值表格展示\n\n## 使用场景\n\n- 主题系统调试\n- 设计 token 验证\n- 主题配置参考\n\n"
    },
    "ThemeProvider": {
      "demosPath": "@/theme/ThemeProvider/demos",
      "name": "ThemeProvider",
      "readme": "# ThemeProvider\n\n基于 Ant Design 主题系统设计的 React Native 主题提供者组件，支持完全自定义的主题配置。\n\n## 特性\n\n- 🎨 **灵活配置** - 支持自定义 token 和 algorithm\n- 🌗 **自动适配** - 自动适配亮色 / 暗色模式\n- 🔧 **算法组合** - 支持多个主题算法组合使用\n- 📱 **移动优化** - 专为 React Native 优化\n- 🎯 **类型安全** - 完整的 TypeScript 支持\n\n## 基础用法\n\n```tsx\nimport { ThemeProvider } from '@lobehub/ui-rn';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <YourApp />\n    </ThemeProvider>\n  );\n}\n```\n\n## 自定义配置\n\n### 自定义 Token\n\n```tsx\n<ThemeProvider\n  theme={{\n    token: {\n      colorPrimary: '#00b96b',\n      borderRadius: 2,\n    },\n  }}\n>\n  <YourApp />\n</ThemeProvider>\n```\n\n### 自定义算法\n\n```tsx\nimport { darkAlgorithm } from '@lobehub/ui-rn';\n\n<ThemeProvider\n  theme={{\n    algorithm: darkAlgorithm,\n  }}\n>\n  <YourApp />\n</ThemeProvider>;\n```\n\n### 组合配置\n\n```tsx\nimport { darkAlgorithm, compactAlgorithm } from '@lobehub/ui-rn';\n\n<ThemeProvider\n  theme={{\n    token: {\n      colorPrimary: '#ff6b35',\n      borderRadius: 2,\n    },\n    algorithm: [darkAlgorithm, compactAlgorithm],\n  }}\n>\n  <YourApp />\n</ThemeProvider>;\n```\n\n## 使用主题\n\n### useTheme Hook\n\n```tsx\nimport { useThemeToken } from '@lobehub/ui-rn';\n\nfunction MyComponent() {\n  const token = useThemeToken();\n\n  return (\n    <View\n      style={{\n        backgroundColor: token.colorBgContainer,\n        padding: token.padding,\n        borderRadius: token.borderRadius,\n      }}\n    >\n      <Text\n        style={{\n          color: token.colorText,\n          fontSize: token.fontSize,\n        }}\n      >\n        Hello Theme!\n      </Text>\n    </View>\n  );\n}\n```\n\n### useThemeMode Hook\n\n```tsx\nimport { useTheme } from '@lobehub/ui-rn';\n\nfunction ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <TouchableOpacity onPress={toggleTheme}>\n      <Text>当前模式: {theme.mode}</Text>\n    </TouchableOpacity>\n  );\n}\n```\n\n## 可用算法\n\n- \\`defaultAlgorithm\\` - 默认亮色算法\n- \\`darkAlgorithm\\` - 暗色算法\n- \\`compactAlgorithm\\` - 紧凑算法（较小间距）\n- \\`compactDarkAlgorithm\\` - 紧凑暗色算法\n\n## API\n\n### ThemeProvider Props\n\n| 属性     | 类型        | 默认值 | 说明     |\n| -------- | ----------- | ------ | -------- |\n| children | ReactNode   | -      | 子组件   |\n| theme    | ThemeConfig | -      | 主题配置 |\n\n### ThemeConfig\n\n| 属性      | 类型                                    | 说明            |\n| --------- | --------------------------------------- | --------------- |\n| token     | Partial<SeedToken>                      | 种子 Token 配置 |\n| algorithm | MappingAlgorithm \\\\| MappingAlgorithm\\\\[] | 主题算法        |\n"
    }
  }
}
