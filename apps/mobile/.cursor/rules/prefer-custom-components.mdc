---
globs: *.ts,*.tsx
description: 优先使用自定义组件规范 - 使用 Text、Flexbox、Center、Block 等自定义组件替代 React Native 原生组件
---

# 优先使用自定义组件规范

本规范定义了在 LobeChat Mobile 项目中应该优先使用自定义组件而不是 React Native 原生组件的场景和原因。

## 核心原则

**✅ 优先使用自定义组件**：项目提供了一系列增强的自定义组件，它们提供了更友好的 API、更好的类型安全、主题集成以及样式变体支持。

**❌ 避免直接使用原生组件**：除非有特殊需求，否则应避免直接使用 `Text`、`View`、`Pressable` 等 React Native 原生组件。

## 组件映射关系

| 原生组件 | 自定义组件 | 使用场景 |
|---------|----------|---------|
| `Text` | `@/components/Text` | 所有文本显示场景 |
| `View` (flex 布局) | `@/components/Flexbox` | 需要 flex 布局的容器 |
| `View` (居中布局) | `@/components/Center` | 需要内容居中的容器 |
| `View` (带样式) | `@/components/Block` | 需要背景、边框、阴影等样式的容器 |
| `Pressable` | `@/components/Flexbox` 或 `@/components/Block` | 可点击的布局容器（使用 `onPress` prop） |

## 1. Text 组件

### 为什么使用 Text

`@/components/Text` 提供了比原生 `Text` 更丰富的功能：

- ✅ **语义化标题**：支持 `h1` ~ `h5` 标题级别
- ✅ **文本样式**：`strong`、`italic`、`underline`、`delete`、`code` 等
- ✅ **语义化类型**：`danger`、`success`、`warning`、`info`、`secondary`
- ✅ **省略号支持**：更友好的 `ellipsis` 配置
- ✅ **主题集成**：自动适配主题颜色和字体
- ✅ **更好的类型提示**：完整的 TypeScript 支持

### 使用示例

```tsx
// ❌ 避免使用原生 Text
import { Text } from 'react-native';

<Text style={{ fontWeight: 'bold', color: 'red' }}>错误信息</Text>

// ✅ 推荐使用自定义 Text
import Text from '@/components/Text';

<Text type="danger" strong>错误信息</Text>
```

### 常见用法

```tsx
import Text from '@/components/Text';

// 标题
<Text as="h1">一级标题</Text>
<Text as="h2">二级标题</Text>

// 文本样式
<Text strong>加粗文本</Text>
<Text italic>斜体文本</Text>
<Text underline>下划线文本</Text>
<Text delete>删除线文本</Text>
<Text code>代码文本</Text>

// 语义化类型
<Text type="danger">错误提示</Text>
<Text type="success">成功提示</Text>
<Text type="warning">警告提示</Text>
<Text type="info">信息提示</Text>
<Text type="secondary">次要文本</Text>

// 省略号
<Text ellipsis>这是一段很长的文本会被截断...</Text>
<Text ellipsis={{ rows: 2 }}>这是一段很长的文本，最多显示两行，超出部分会被截断...</Text>

// 组合使用
<Text type="danger" strong numberOfLines={1}>重要错误信息</Text>
```

## 2. Flexbox 组件

### 为什么使用 Flexbox

`@/components/Flexbox` 提供了比原生 `View` 更友好的 flex 布局配置：

- ✅ **简化的 API**：直观的 props 命名 (`horizontal`、`justify`、`align`、`gap`)
- ✅ **自动处理方向**：`horizontal` prop 自动切换 `flexDirection`
- ✅ **内置交互**：支持 `onPress`，自动切换 `Pressable`/`View`
- ✅ **间距支持**：原生支持 `gap` prop
- ✅ **更少的样式代码**：常用布局属性作为 props 直接配置

### 使用示例

```tsx
// ❌ 避免使用原生 View
import { View, Pressable } from 'react-native';

<View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', gap: 16 }}>
  <Text>内容 1</Text>
  <Text>内容 2</Text>
</View>

// ✅ 推荐使用 Flexbox
import Flexbox from '@/components/Flexbox';
import Text from '@/components/Text';

<Flexbox horizontal justify="space-between" align="center" gap={16}>
  <Text>内容 1</Text>
  <Text>内容 2</Text>
</Flexbox>
```

### 常见用法

```tsx
import Flexbox from '@/components/Flexbox';

// 垂直布局（默认）
<Flexbox gap={16}>
  <Text>项目 1</Text>
  <Text>项目 2</Text>
</Flexbox>

// 水平布局
<Flexbox horizontal gap={8}>
  <Text>项目 1</Text>
  <Text>项目 2</Text>
</Flexbox>

// 对齐方式
<Flexbox justify="center" align="center">
  <Text>居中内容</Text>
</Flexbox>

<Flexbox horizontal justify="space-between" align="flex-start">
  <Text>左侧</Text>
  <Text>右侧</Text>
</Flexbox>

// 可点击容器
<Flexbox 
  horizontal 
  gap={8} 
  padding={16}
  onPress={() => console.log('clicked')}
>
  <Icon name="home" />
  <Text>首页</Text>
</Flexbox>

// 弹性布局
<Flexbox horizontal gap={8}>
  <Flexbox flex={1}>
    <Text>占据剩余空间</Text>
  </Flexbox>
  <Text>固定宽度</Text>
</Flexbox>

// 换行
<Flexbox horizontal wrap="wrap" gap={8}>
  <Text>标签 1</Text>
  <Text>标签 2</Text>
  <Text>标签 3</Text>
</Flexbox>
```

## 3. Center 组件

### 为什么使用 Center

`@/components/Center` 是专门用于居中布局的组件：

- ✅ **语义化**：明确表达居中意图
- ✅ **简化代码**：不需要手动设置 `justify` 和 `align`
- ✅ **默认居中**：`justify="center"` 和 `align="center"` 是默认值
- ✅ **基于 Flexbox**：继承所有 Flexbox 的功能

### 使用示例

```tsx
// ❌ 避免使用原生 View
import { View } from 'react-native';

<View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
  <Text>居中内容</Text>
</View>

// ✅ 推荐使用 Center
import Center from '@/components/Center';
import Text from '@/components/Text';

<Center flex={1}>
  <Text>居中内容</Text>
</Center>
```

### 常见用法

```tsx
import Center from '@/components/Center';

// 基础居中
<Center>
  <Text>居中内容</Text>
</Center>

// 占满容器并居中
<Center flex={1}>
  <Text>垂直和水平居中</Text>
</Center>

// 固定尺寸居中
<Center width={200} height={200}>
  <Icon name="loading" />
</Center>

// 水平居中（垂直方向可以自定义）
<Center horizontal justify="flex-start" gap={8}>
  <Icon name="user" />
  <Text>用户名</Text>
</Center>

// 可点击的居中容器
<Center 
  width={100} 
  height={100} 
  onPress={() => console.log('clicked')}
>
  <Icon name="add" />
  <Text>添加</Text>
</Center>
```

## 4. Block 组件

### 为什么使用 Block

`@/components/Block` 是增强的样式容器组件：

- ✅ **样式变体**：`filled`、`outlined`、`borderless` 三种预设样式
- ✅ **视觉效果**：内置 `shadow` 和 `glass` 效果
- ✅ **交互状态**：自动处理 hover 和 press 状态样式
- ✅ **主题集成**：使用 `stylish` 预设，自动适配主题
- ✅ **CVA 管理**：类型安全的样式组合
- ✅ **基于 Flexbox**：继承所有 Flexbox 的布局能力

### 使用示例

```tsx
// ❌ 避免使用原生 View 或 Pressable
import { Pressable } from 'react-native';

<Pressable 
  style={({ pressed }) => ({
    backgroundColor: pressed ? '#f0f0f0' : '#fff',
    borderRadius: 8,
    padding: 16,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    // ... 大量样式代码
  })}
  onPress={handlePress}
>
  <Text>卡片内容</Text>
</Pressable>

// ✅ 推荐使用 Block
import Block from '@/components/Block';
import Text from '@/components/Text';

<Block variant="filled" shadow onPress={handlePress}>
  <Text>卡片内容</Text>
</Block>
```

### 常见用法

```tsx
import Block from '@/components/Block';

// 样式变体
<Block variant="filled">
  <Text>填充背景</Text>
</Block>

<Block variant="outlined">
  <Text>轮廓边框</Text>
</Block>

<Block variant="borderless">
  <Text>无边框</Text>
</Block>

// 视觉效果
<Block variant="filled" shadow>
  <Text>带阴影的卡片</Text>
</Block>

<Block variant="filled" glass>
  <Text>玻璃效果背景</Text>
</Block>

// 可点击卡片
<Block 
  variant="outlined" 
  padding={16}
  gap={8}
  onPress={() => console.log('clicked')}
>
  <Text as="h3">卡片标题</Text>
  <Text type="secondary">卡片描述</Text>
</Block>

// 组合布局和样式
<Block variant="filled" shadow padding={24}>
  <Flexbox gap={16}>
    <Text as="h2">用户信息</Text>
    <Flexbox horizontal gap={8}>
      <Icon name="user" />
      <Text>用户名</Text>
    </Flexbox>
  </Flexbox>
</Block>
```

## 5. 组件组合使用

### 完整示例：用户卡片

```tsx
import Block from '@/components/Block';
import Center from '@/components/Center';
import Flexbox from '@/components/Flexbox';
import Text from '@/components/Text';

const UserCard = ({ user }) => {
  return (
    <Block variant="filled" shadow padding={16} gap={12}>
      {/* 头部：头像和名称 */}
      <Flexbox horizontal gap={12} align="center">
        <Center width={48} height={48}>
          <Avatar source={user.avatar} />
        </Center>
        <Flexbox flex={1} gap={4}>
          <Text as="h4" strong>{user.name}</Text>
          <Text type="secondary" fontSize={12}>{user.email}</Text>
        </Flexbox>
      </Flexbox>

      {/* 统计信息 */}
      <Flexbox horizontal gap={24}>
        <Flexbox gap={4} align="center">
          <Text strong fontSize={18}>{user.posts}</Text>
          <Text type="secondary" fontSize={12}>帖子</Text>
        </Flexbox>
        <Flexbox gap={4} align="center">
          <Text strong fontSize={18}>{user.followers}</Text>
          <Text type="secondary" fontSize={12}>关注者</Text>
        </Flexbox>
        <Flexbox gap={4} align="center">
          <Text strong fontSize={18}>{user.following}</Text>
          <Text type="secondary" fontSize={12}>关注中</Text>
        </Flexbox>
      </Flexbox>

      {/* 操作按钮 */}
      <Flexbox horizontal gap={8}>
        <Block 
          flex={1} 
          variant="filled" 
          padding={12}
          onPress={() => console.log('follow')}
        >
          <Center>
            <Text>关注</Text>
          </Center>
        </Block>
        <Block 
          flex={1} 
          variant="outlined" 
          padding={12}
          onPress={() => console.log('message')}
        >
          <Center>
            <Text>消息</Text>
          </Center>
        </Block>
      </Flexbox>
    </Block>
  );
};
```

## 6. 何时可以使用原生组件

以下场景可以考虑使用原生组件：

### 6.1 特殊需求场景

```tsx
// ScrollView, FlatList, SectionList 等列表组件
import { FlatList } from 'react-native';
<FlatList data={data} renderItem={renderItem} />

// Image 组件
import { Image } from 'react-native';
<Image source={require('./image.png')} />

// TextInput 组件（如果没有自定义封装）
import { TextInput } from 'react-native';
<TextInput value={text} onChangeText={setText} />

// 特殊的原生组件
import { SafeAreaView, KeyboardAvoidingView, Modal } from 'react-native';
```

### 6.2 性能关键场景

在列表项等性能关键场景，如果自定义组件带来性能问题，可以考虑使用原生组件，但需要：

```tsx
// ⚠️ 性能优化场景，谨慎使用
import { View, Text } from 'react-native';
import { memo } from 'react';

const ListItem = memo(({ item }) => (
  <View style={styles.item}>
    <Text style={styles.text}>{item.title}</Text>
  </View>
));
```

## 7. 导入规范

### 7.1 应用代码中的导入

在应用代码（`app/`、`src/features/` 等）中：

```tsx
// ✅ 推荐：使用绝对路径导入
import Block from '@/components/Block';
import Center from '@/components/Center';
import Flexbox from '@/components/Flexbox';
import Text from '@/components/Text';
```

### 7.2 组件内部的导入

在 `src/components/` 目录下的组件中：

```tsx
// ✅ 推荐：使用相对路径导入其他组件
import Block from '../Block';
import Center from '../Center';
import Flexbox from '../Flexbox';
import Text from '../Text';
```

### 7.3 Demo 文件中的导入

在组件的 `demos/` 目录下：

```tsx
// ✅ 推荐：从 @lobehub/ui-rn 导入（展示公开 API）
import { Block, Center, Flexbox, Text } from '@lobehub/ui-rn';
```

## 8. 快速参考

| 需求 | 推荐组件 | 关键 Props |
|-----|---------|-----------|
| 显示普通文本 | `Text` | `children` |
| 显示标题 | `Text` | `as="h1"` ~ `as="h5"` |
| 显示错误/成功提示 | `Text` | `type="danger"` / `type="success"` |
| 垂直布局 | `Flexbox` | `gap={16}` |
| 水平布局 | `Flexbox` | `horizontal gap={8}` |
| 内容居中 | `Center` | `flex={1}` |
| 卡片容器 | `Block` | `variant="filled" shadow` |
| 可点击容器 | `Flexbox` / `Block` | `onPress={handler}` |
| 列表项 | `Block` / `Flexbox` | `horizontal align="center" gap={12}` |

## 9. 常见错误和修复

### 错误 1: 直接使用原生 Text

```tsx
// ❌ 错误
import { Text, View } from 'react-native';

<View>
  <Text style={{ fontWeight: 'bold', color: '#e74c3c' }}>
    错误信息
  </Text>
</View>

// ✅ 修复
import Flexbox from '@/components/Flexbox';
import Text from '@/components/Text';

<Flexbox>
  <Text type="danger" strong>
    错误信息
  </Text>
</Flexbox>
```

### 错误 2: 复杂的 View 样式

```tsx
// ❌ 错误
import { View } from 'react-native';

<View 
  style={{
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    gap: 16,
    padding: 12,
  }}
>
  {children}
</View>

// ✅ 修复
import Flexbox from '@/components/Flexbox';

<Flexbox 
  horizontal 
  justify="space-between" 
  align="center" 
  gap={16}
  padding={12}
>
  {children}
</Flexbox>
```

### 错误 3: 手动实现居中布局

```tsx
// ❌ 错误
import { View } from 'react-native';

<View style={{ 
  flex: 1, 
  justifyContent: 'center', 
  alignItems: 'center' 
}}>
  {children}
</View>

// ✅ 修复
import Center from '@/components/Center';

<Center flex={1}>
  {children}
</Center>
```

### 错误 4: 复杂的 Pressable 样式

```tsx
// ❌ 错误
import { Pressable, StyleSheet } from 'react-native';

<Pressable
  style={({ pressed }) => [
    styles.card,
    pressed && styles.cardPressed,
  ]}
  onPress={handlePress}
>
  {children}
</Pressable>

const styles = StyleSheet.create({
  card: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 2 },
  },
  cardPressed: {
    opacity: 0.8,
  },
});

// ✅ 修复
import Block from '@/components/Block';

<Block 
  variant="filled" 
  shadow 
  padding={16}
  onPress={handlePress}
>
  {children}
</Block>
```

## 10. 总结

### 核心优势

使用自定义组件的核心优势：

1. **更少的代码**：友好的 API 减少样式代码
2. **更好的可读性**：语义化的 props 和组件名
3. **类型安全**：完整的 TypeScript 支持
4. **主题集成**：自动适配明暗主题
5. **统一风格**：使用预设样式保持 UI 一致性
6. **易于维护**：集中管理样式逻辑

### 记住这个规则

**在 LobeChat Mobile 中，优先使用：**

- ✅ `Text` 而不是 `react-native` 的 `Text`
- ✅ `Flexbox` 而不是 `react-native` 的 `View` (flex 布局)
- ✅ `Center` 而不是 `react-native` 的 `View` (居中布局)
- ✅ `Block` 而不是 `react-native` 的 `View` / `Pressable` (样式容器)

**这些组件提供了更友好的配置方式，让代码更简洁、更易维护！**
