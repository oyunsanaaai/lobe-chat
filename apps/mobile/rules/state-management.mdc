---
description:
globs:
alwaysApply: false
---
# State Management with Zustand

## Store Architecture

The app uses Zustand for state management. Configuration data persists through **react-native-mmkv** (replacing AsyncStorage for better performance).

### Core Stores

#### Configuration Stores (with MMKV persistence)

**Settings**
- [store/setting.ts](mdc:store/setting.ts) - App settings
- Manages: Theme, font, language, developer mode
- Persistence: **MMKV** with JSON serialization (appStorage instance)

**OpenAI Configuration**
- [store/openai.ts](mdc:store/openai.ts) - OpenAI API configuration
- Manages: API key, proxy settings
- Persistence: **MMKV** with JSON serialization (appStorage instance)

**Agent Configuration**
- [store/agent/store.ts](mdc:store/agent/store.ts) - AI Agent configuration
- Manages: Agent config, initialization data
- Persistence: **MMKV** with JSON serialization (appStorage instance)

#### Runtime Stores (no persistence)

**Session Management**
- [store/session/store.ts](mdc:store/session/store.ts) - Main session store
- Manages: Current session state, session list
- Persistence: Runtime only (future: SWR + local database)

**Chat State**
- [store/chat/store.ts](mdc:store/chat/store.ts) - Active chat functionality
- Manages: Current chat state, messages, loading states
- Persistence: Runtime only (future: SWR + local database)

**User State**
- [store/user/index.ts](mdc:store/user/index.ts) - User authentication state
- Manages: Authentication state, user info
- Persistence: Runtime only (Token stored in expo-secure-store separately)

## State Patterns

### Store Structure
```typescript
interface StoreState {
  // State properties
  data: DataType;

  // Actions
  setData: (data: DataType) => void;
  updateData: (updater: (data: DataType) => DataType) => void;
  resetData: () => void;
}
```

### Persistence Pattern
```typescript
import { createJSONStorage, persist } from 'zustand/middleware';
import { appStorage, createMMKVStorage } from '@/utils/storage';

export const useStore = create<StoreState>()(
  persist(
    (set, get) => ({
      // State and actions
    }),
    {
      name: 'store-name',
      storage: createJSONStorage(() => createMMKVStorage(appStorage)),
    },
  ),
);
```

### Storage Instances

The app uses a single MMKV instance for configuration data:

- **appStorage**: Global app configuration (settings, openai, agent config)

For sensitive data (tokens, API keys), use **expo-secure-store** instead.

### Selector Pattern
- Use selectors for derived state
- Implement memoization for performance
- Keep selectors in separate files for organization

### Type Safety
- Define interfaces for all store states
- Use TypeScript for compile-time type checking
- Export types for use in components

## Usage Guidelines

### In Components
```typescript
const { data, setData } = useStore();
const derivedData = useStore(selector);
```

### Store Updates
- Use immutable updates
- Implement proper error handling
- Add loading states for async operations

### Performance
- Use selectors to prevent unnecessary re-renders
- Implement proper memoization
- Avoid storing computed values in state
