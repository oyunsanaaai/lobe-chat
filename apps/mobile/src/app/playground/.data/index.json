{
  "components": {
    "ActionIcon": {
      "demosPath": "@lobehub/ui-rn/ActionIcon/demos",
      "name": "ActionIcon",
      "readme": "\nUsed to display clickable icon buttons in the interface, supporting size, variant, loading and disabled states. Suitable for toolbars, cards or lists.\n\n## Features\n\n- ✅ Three built-in sizes with custom size support\n- ✅ Three visual variants: borderless, filled, and outlined\n- ✅ Built-in Lucide LoaderCircle loading animation\n- ✅ Disabled state and click feedback support\n- ✅ Icon accepts component or ReactNode\n- ✅ Custom icon color support\n- ✅ Complete TypeScript type definitions\n\n## Basic Usage\n\n```tsx\nimport { ActionIcon } from '@lobehub/ui-rn';\nimport { MoreHorizontal } from 'lucide-react-native';\n\n<ActionIcon icon={MoreHorizontal} onPress={() => console.log('more')} />;\n\n// Sizes\n<ActionIcon icon={MoreHorizontal} size=\"small\" />;\n<ActionIcon icon={MoreHorizontal} size=\"middle\" />;\n<ActionIcon icon={MoreHorizontal} size=\"large\" />;\n<ActionIcon icon={MoreHorizontal} size={28} />;\n\n// Variants\n<ActionIcon icon={MoreHorizontal} variant=\"borderless\" />;\n<ActionIcon icon={MoreHorizontal} variant=\"filled\" />;\n<ActionIcon icon={MoreHorizontal} variant=\"outlined\" />;\n\n// Loading & Disabled\n<ActionIcon icon={MoreHorizontal} loading />;\n<ActionIcon icon={MoreHorizontal} disabled />;\n\n// Custom Color\n<ActionIcon color=\"#F97316\" icon={MoreHorizontal} />;\n```\n",
      "group": "Basic",
      "title": "ActionIcon",
      "description": "ActionIcon is a component for rendering icon buttons with background, supporting multiple style variants, sizes, and interaction states. It integrates with the Lucide icon library and provides tooltip capabilities."
    },
    "Alert": {
      "demosPath": "@lobehub/ui-rn/Alert/demos",
      "name": "Alert",
      "readme": "\n## Features\n\n- ✅ Supports four status styles: `info`, `success`, `warning`, `error`\n- ✅ Allows displaying description text, action buttons, and custom icons\n- ✅ Closable alerts with close callback support\n- ✅ Theme adaptation with automatic semantic color inheritance\n- ✅ Complete TypeScript type definitions\n\n## Basic Usage\n\n```tsx\nimport { Alert } from '@lobehub/ui-rn';\n\n<Alert message=\"Default Alert\" />\n\nimport { Alert, Button, Icon } from '@lobehub/ui-rn';\nimport { Info } from 'lucide-react-native';\n\n<Alert\n  description=\"Supports description information, suitable for scenarios that require additional explanation.\"\n  message=\"Information Alert\"\n/>\n```\n\n## Type Examples\n\n```tsx\n<Alert message=\"Info Alert\" type=\"info\" />\n<Alert message=\"Success Alert\" type=\"success\" />\n<Alert message=\"Warning Alert\" type=\"warning\" />\n<Alert message=\"Error Alert\" type=\"error\" />\n```\n\n## Closable\n\n```tsx\n<Alert closable message=\"Operation Successful\" type=\"success\" />\n\n<Alert\n  closable\n  description=\"The onClose callback is triggered when the alert is closed.\"\n  message=\"Alert with Action Required\"\n  onClose={() => console.log('Alert closed')}\n/>\n```\n\n## Custom Icon & Action\n\n```tsx\n<Alert\n  action={\n    <Button size=\"small\" type=\"primary\">\n      View Details\n    </Button>\n  }\n  description=\"Action buttons can be placed inside the alert to guide users to the next step.\"\n  icon={<Icon icon={Info} size={20} />}\n  message=\"Custom Content\"\n  type=\"info\"\n/>\n```\n",
      "group": "Feedback",
      "title": "Alert",
      "description": "React Native Alert component based on Ant Design Alert, used to display important operational feedback information."
    },
    "Avatar": {
      "demosPath": "@lobehub/ui-rn/Avatar/demos",
      "name": "Avatar",
      "readme": "\n## Features\n\n- ✅ Supports network and local images\n- ✅ Custom size support\n- ✅ Border style customization\n- ✅ Image loading error handling\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Avatar } from '@lobehub/ui-rn';\n\n// Basic usage\n<Avatar\n  avatar=\"https://github.com/lobehub.png\"\n  alt=\"LobeHub\"\n/>\n\n// Custom size\n<Avatar\n  avatar=\"https://github.com/lobehub.png\"\n  alt=\"LobeHub\"\n  size={48}\n/>\n\n// With border\n<Avatar\n  avatar=\"https://github.com/lobehub.png\"\n  alt=\"LobeHub\"\n  size={48}\n  borderColor=\"#1677ff\"\n  borderWidth={2}\n/>\n```\n",
      "group": "Display",
      "title": "Avatar",
      "description": "Customizable avatar component supporting custom sizes, borders, and error handling."
    },
    "Block": {
      "demosPath": "@lobehub/ui-rn/Block/demos",
      "name": "Block",
      "readme": "\n## Features\n\n- ✅ Flexible Flexbox-based layout\n- ✅ Multiple style variants (filled, outlined, borderless)\n- ✅ Shadow and glass effect support\n- ✅ Clickable state support\n- ✅ Style variant management using class-variance-authority\n- ✅ Fully compatible with React Native\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Block } from '@lobehub/ui-rn';\n\n// Basic usage\n<Block>\n  <Text>Basic Block</Text>\n</Block>\n\n// Different variants\n<Block variant=\"filled\">\n  <Text>Filled Block</Text>\n</Block>\n\n<Block variant=\"outlined\">\n  <Text>Outlined Block</Text>\n</Block>\n\n<Block variant=\"borderless\">\n  <Text>Borderless Block</Text>\n</Block>\n\n// With effects\n<Block shadow>\n  <Text>Block with Shadow</Text>\n</Block>\n\n<Block glass>\n  <Text>Glass Effect Block</Text>\n</Block>\n\n// Clickable\n<Block clickable onPress={() => console.log('clicked')}>\n  <Text>Clickable Block</Text>\n</Block>\n\n// Combined effects\n<Block\n  variant=\"filled\"\n  shadow\n  glass\n  clickable\n  onPress={() => console.log('clicked')}\n>\n  <Text>Combined Effects Block</Text>\n</Block>\n```\n\n## Style Variants\n\n### Filled\n\nDefault variant with background color fill.\n\n```tsx\n<Block variant=\"filled\">\n  <Text>Filled Block</Text>\n</Block>\n```\n\n### Outlined\n\nTransparent background with border.\n\n```tsx\n<Block variant=\"outlined\">\n  <Text>Outlined Block</Text>\n</Block>\n```\n\n### Borderless\n\nCompletely transparent, no border.\n\n```tsx\n<Block variant=\"borderless\">\n  <Text>Borderless Block</Text>\n</Block>\n```\n\n## Effect Combinations\n\n### Shadow Effect\n\nAdd shadow to Block for enhanced layering.\n\n```tsx\n<Block shadow>\n  <Text>Block with Shadow</Text>\n</Block>\n```\n\n### Glass Effect\n\nAdd semi-transparent background for glass texture.\n\n```tsx\n<Block glass>\n  <Text>Glass Effect Block</Text>\n</Block>\n```\n\n### Clickable State\n\nEnable click interaction with automatic hover state styling.\n\n```tsx\n<Block clickable onPress={() => console.log('clicked')}>\n  <Text>Clickable Block</Text>\n</Block>\n```\n\n## CVA Style Management\n\nBlock component uses custom React Native CVA for style variant management. The CVA configuration is located in the `style.ts` file:\n\n```tsx\n// CVA configuration in style.ts\nexport const useBlockVariants = (styles) =>\n  cva(styles.root, {\n    variants: {\n      variant: {\n        filled: styles.filled,\n        outlined: styles.outlined,\n        borderless: styles.borderless,\n      },\n      clickable: {\n        false: null,\n        true: styles.clickableRoot,\n      },\n    },\n    compoundVariants: [\n      {\n        clickable: true,\n        variant: 'filled',\n        style: styles.clickableFilled,\n      },\n    ],\n    defaultVariants: {\n      variant: 'filled',\n      clickable: false,\n    },\n  });\n\n// Usage in component\nconst { styles } = useStyles();\nconst blockVariants = useBlockVariants(styles);\nconst variantStyles = blockVariants({ variant, clickable });\n```\n\n### Style File Pattern Advantages\n\n1. **Centralized Management**: Styles and variant logic are in the style file\n2. **Theme Integration**: Direct access to theme tokens\n3. **Type Safety**: Complete TypeScript support\n4. **Easy Maintenance**: Clear file structure\n\n## Layout Applications\n\n### Card Container\n\n```tsx\n<Block variant=\"filled\" shadow style={{ padding: 16 }}>\n  <Text style={{ fontWeight: 'bold' }}>Card Title</Text>\n  <Text>Card Content</Text>\n</Block>\n```\n\n### Interactive Button\n\n```tsx\n<Block clickable variant=\"outlined\" onPress={() => handleAction()} style={{ padding: 12 }}>\n  <Text>Action Button</Text>\n</Block>\n```\n\n### Grouping Container\n\n```tsx\n<Block variant=\"borderless\" direction=\"column\">\n  <Block variant=\"filled\" style={{ marginBottom: 8 }}>\n    <Text>Item 1</Text>\n  </Block>\n  <Block variant=\"filled\">\n    <Text>Item 2</Text>\n  </Block>\n</Block>\n```\n",
      "group": "Layout",
      "title": "Block",
      "description": "Flexible container component based on Flexbox, supporting multiple style variants, shadow effects, and glass effects, with class-variance-authority for style management."
    },
    "BottomSheet": {
      "demosPath": "@lobehub/ui-rn/BottomSheet/demos",
      "name": "BottomSheet",
      "readme": "\n## Features\n\n- ✅ 基于 `@gorhom/bottom-sheet` 构建，性能优异\n- ✅ 支持多个快照点（snap points）\n- ✅ 手势操作，支持拖动关闭\n- ✅ 可自定义标题和关闭按钮\n- ✅ 背景遮罩支持\n- ✅ 动态内容高度\n- ✅ 主题自适应\n- ✅ TypeScript 支持\n\n## Basic Usage\n\n```tsx\nimport { BottomSheet } from '@lobehub/ui-rn';\nimport { useState } from 'react';\nimport { Button, Text, View } from 'react-native';\n\nexport default () => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <View>\n      <Button title=\"打开底部抽屉\" onPress={() => setOpen(true)} />\n      \n      <BottomSheet\n        open={open}\n        title=\"底部抽屉标题\"\n        onClose={() => setOpen(false)}\n      >\n        <Text>这是底部抽屉的内容</Text>\n      </BottomSheet>\n    </View>\n  );\n};\n```\n\n## Custom Snap Points\n\n你可以自定义快照点来控制抽屉的展开高度：\n\n```tsx\n<BottomSheet\n  open={open}\n  snapPoints={['25%', '50%', '90%']}\n  initialSnapIndex={1}\n  title=\"自定义快照点\"\n  onClose={() => setOpen(false)}\n>\n  <Text>拖动抽屉可以在 25%、50% 和 90% 高度之间切换</Text>\n</BottomSheet>\n```\n\n## Without Close Button\n\n不显示关闭按钮：\n\n```tsx\n<BottomSheet\n  open={open}\n  title=\"无关闭按钮\"\n  showCloseButton={false}\n  onClose={() => setOpen(false)}\n>\n  <Text>这个抽屉没有关闭按钮</Text>\n</BottomSheet>\n```\n\n## Disable Pan to Close\n\n禁用下拉关闭手势：\n\n```tsx\n<BottomSheet\n  open={open}\n  title=\"禁用下拉关闭\"\n  enablePanDownToClose={false}\n  onClose={() => setOpen(false)}\n>\n  <Text>无法通过下拉手势关闭，只能点击关闭按钮</Text>\n</BottomSheet>\n```\n\n## With Complex Content\n\n底部抽屉可以包含复杂的内容：\n\n```tsx\nimport { BottomSheet } from '@lobehub/ui-rn';\nimport { ScrollView, StyleSheet, Text, View } from 'react-native';\n\n<BottomSheet\n  open={open}\n  title=\"复杂内容\"\n  snapPoints={['50%', '90%']}\n  onClose={() => setOpen(false)}\n>\n  <ScrollView style={styles.scrollContent}>\n    {Array.from({ length: 20 }).map((_, i) => (\n      <View key={i} style={styles.item}>\n        <Text>列表项 {i + 1}</Text>\n      </View>\n    ))}\n  </ScrollView>\n</BottomSheet>\n\nconst styles = StyleSheet.create({\n  scrollContent: {\n    flex: 1,\n  },\n  item: {\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n  },\n});\n```\n\n## API\n\n### BottomSheetProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n|---|---|---|---|\n| children | `ReactNode` | - | 底部抽屉的内容 |\n| title | `string \\| ReactNode` | - | 底部抽屉标题 |\n| showCloseButton | `boolean` | `true` | 是否显示关闭按钮 |\n| onClose | `() => void` | - | 关闭回调 |\n| open | `boolean` | `false` | 打开状态 |\n| snapPoints | `(string \\| number)[]` | `['50%', '90%']` | 快照点位置，可以是百分比字符串或数字（像素） |\n| initialSnapIndex | `number` | `0` | 初始快照点索引 |\n| enablePanDownToClose | `boolean` | `true` | 是否启用手势关闭 |\n| enableBackdrop | `boolean` | `true` | 是否启用背景遮罩 |\n| backdropComponent | `React.FC<BottomSheetBackdropProps>` | - | 自定义背景遮罩组件 |\n| containerStyle | `ViewStyle` | - | 容器样式 |\n| contentContainerStyle | `ViewStyle` | - | 内容容器样式 |\n| style | `ViewStyle` | - | 底部抽屉样式 |\n| onChange | `(index: number) => void` | - | 快照点变化回调 |\n| animationConfigs | `AnimationConfigs` | - | 动画配置 |\n\n## Notes\n\n### Provider 配置\n\n此组件依赖 `BottomSheetModalProvider`，确保在应用的根组件中已经配置：\n\n```tsx\nimport { BottomSheetModalProvider } from '@gorhom/bottom-sheet';\n\nexport default function App() {\n  return (\n    <BottomSheetModalProvider>\n      {/* 你的应用内容 */}\n    </BottomSheetModalProvider>\n  );\n}\n```\n\n在本项目中，`BottomSheetModalProvider` 已经在 `src/app/_layout.tsx` 中配置好了。\n\n### Snap Points\n\n- 快照点（Snap Points）定义了底部抽屉可以停靠的高度位置\n- 可以使用百分比字符串（如 `'50%'`）或具体数字（如 `300`）\n- 建议至少提供 2 个快照点\n- 快照点应该从小到大排列\n\n### 手势操作\n\n- 拖动抽屉把手可以在不同快照点之间切换\n- 向下拖动超过最小快照点会关闭抽屉（如果 `enablePanDownToClose` 为 `true`）\n- 点击背景遮罩也会关闭抽屉（如果 `enableBackdrop` 为 `true`）\n\n## Related Components\n\n- [ActionIcon](./ActionIcon) - 用于关闭按钮\n- [Text](./Text) - 用于标题文本\n- [Flexbox](./Flexbox) - 用于布局\n\n",
      "group": "Overlay",
      "title": "BottomSheet",
      "description": "底部抽屉组件，用于从屏幕底部滑出内容，支持手势操作和多个快照点。基于 @gorhom/bottom-sheet 实现。"
    },
    "Button": {
      "demosPath": "@lobehub/ui-rn/Button/demos",
      "name": "Button",
      "readme": "\n## Features\n\n- ✅ Multiple button types (Primary, Default, Dashed, Text, Link)\n- ✅ Three sizes (Small, Middle, Large)\n- ✅ Loading state support\n- ✅ Disabled state support\n- ✅ Icon support (`icon` prop)\n- ✅ Custom style support\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Button } from '@lobehub/ui-rn';\n\n// Basic usage\n<Button onPress={() => console.log('clicked')}>\n  Default Button\n</Button>\n\n// Primary button\n<Button type=\"primary\" onPress={() => console.log('clicked')}>\n  Primary Button\n</Button>\n\n// Dashed button\n<Button type=\"dashed\" onPress={() => console.log('clicked')}>\n  Dashed Button\n</Button>\n\n// Different sizes\n<Button size=\"small\">Small</Button>\n<Button size=\"middle\">Middle</Button>\n<Button size=\"large\">Large</Button>\n\n// Loading state\n<Button loading onPress={() => console.log('clicked')}>\n  Loading Button\n</Button>\n\n// Disabled state\n<Button disabled onPress={() => console.log('clicked')}>\n  Disabled Button\n</Button>\n\n// Block button\n<Button block onPress={() => console.log('clicked')}>\n  Block Button\n</Button>\n\n// Icon button\nimport { Plus } from 'lucide-react-native';\n<Button icon={<Plus />} type=\"primary\">\n  Create\n</Button>\n\n// Circle button\n<Button shape=\"circle\" type=\"primary\" icon={<Plus />} />\n```\n\n## Button Types\n\n- `primary`: Primary button for main actions\n- `default`: Default button for secondary actions\n- `text`: Text button for lightweight actions\n- `link`: Link button for navigation\n\n## Size Specifications\n\n- `small`: Small size (24px height)\n- `middle`: Medium size (32px height)\n- `large`: Large size (40px height)\n",
      "group": "Basic",
      "title": "Button",
      "description": "React Native button component inspired by Ant Design, supporting multiple types, sizes, and states."
    },
    "CapsuleTabs": {
      "demosPath": "@lobehub/ui-rn/CapsuleTabs/demos",
      "name": "CapsuleTabs",
      "readme": "\n## Features\n\n- ✅ Capsule-style tab design\n- ✅ Horizontal scrolling support\n- ✅ Selection state management\n- ✅ Icon and text combinations\n- ✅ Custom styling\n- ✅ Three sizes: large, middle, small\n- ✅ Smart scroll shadows (can be toggled)\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { CapsuleTabItem, CapsuleTabs } from '@lobehub/ui-rn';\nimport { Briefcase, Home } from 'lucide-react-native';\n\nconst items: CapsuleTabItem[] = [\n  { key: 'all', label: 'All', icon: Home },\n  { key: 'work', label: 'Work', icon: Briefcase },\n  { key: 'personal', label: 'Personal' },\n];\n\nconst [selectedKey, setSelectedKey] = useState('all');\n\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} />;\n```\n\n## Sizes\n\nUse the `size` prop to quickly switch component height and font size, with three presets: `large`, `middle`, and `small`.\n\n```tsx\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} size=\"large\" />\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} size=\"middle\" />\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} size=\"small\" />\n```\n\n## Scroll Shadow\n\nThe component uses ScrollShadow to automatically display gradient shadows when content is scrollable. You can disable this feature:\n\n```tsx\n// Enable scroll shadow (default)\n<CapsuleTabs items={items} selectedKey={selectedKey} onSelect={setSelectedKey} />\n\n// Disable scroll shadow\n<CapsuleTabs\n  enableScrollShadow={false}\n  items={items}\n  onSelect={setSelectedKey}\n  selectedKey={selectedKey}\n/>\n```\n",
      "group": "Navigation",
      "title": "CapsuleTabs",
      "description": "Horizontally scrollable capsule-style tabs component with custom styling, icon combinations, and selection state support."
    },
    "Card": {
      "demosPath": "@lobehub/ui-rn/Card/demos",
      "name": "Card",
      "readme": "\n## Features\n\n- ✅ Title and extra actions share a single row layout\n- ✅ Optional cover area with automatic rounded corner clipping\n- ✅ Content slot accepts any React Node\n- ✅ Supports optional dividers, background variants, shadows, and other Block capabilities\n- ✅ Complete TypeScript types\n\n## Basic Usage\n\n```tsx\nimport { Button, Card, Space, Tag } from '@lobehub/ui-rn';\nimport { Text } from 'react-native';\n\nexport default () => (\n  <Card extra={<Tag color=\"processing\">Beta</Tag>} title=\"Custom Server\">\n    <Text>\n      Self-hosted servers allow syncing conversations and model settings to private environments.\n    </Text>\n    <Space size=\"small\">\n      <Button size=\"small\" type=\"default\">\n        Cancel\n      </Button>\n      <Button size=\"small\" type=\"primary\">\n        Apply\n      </Button>\n    </Space>\n  </Card>\n);\n```\n\n## Divider Control\n\nThe divider is enabled by default and can be turned off with a boolean value.\n\n```tsx\n<Card divider={false} title=\"No Divider\">\n  <Text>No divider will be rendered between title and content.</Text>\n</Card>\n```\n\n## With Cover\n\n```tsx\n<Card cover={<Image source={{ uri: '...' }} style={{ height: 160 }} />} title=\"Card with Cover\" />\n```\n\nThe cover area is automatically clipped into rounded corners, making it more suitable for image and text cards.\n",
      "group": "Layout",
      "title": "Card",
      "description": "General-purpose container for displaying grouped information, supporting title and extra action bar, optional cover, and all Block variant properties."
    },
    "Cell": {
      "demosPath": "@lobehub/ui-rn/Cell/demos",
      "name": "Cell",
      "readme": "\n## Features\n\n- ✅ Based on Block component, inherits all layout capabilities\n- ✅ Supports custom icons on the left\n- ✅ Supports extra content on the right (text or custom components)\n- ✅ Optional arrow indicator\n- ✅ Clickable state support\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Cell } from '@lobehub/ui-rn';\n\n// Basic cell\n<Cell title=\"Settings\" />\n\n// Cell with icon\n<Cell\n  icon={Settings}\n  title=\"General Settings\"\n/>\n\n// Cell with extra content\n<Cell\n  title=\"Language\"\n  extra=\"English\"\n/>\n\n// Cell without arrow\n<Cell\n  title=\"Read-only Item\"\n  showArrow={false}\n/>\n\n// Clickable cell\n<Cell\n  title=\"Account\"\n  icon={User}\n  extra=\"Tap to edit\"\n  onPress={() => console.log('Navigate to account')}\n/>\n```\n\n## Component Structure\n\nCell component consists of the following parts:\n\n```\n┌─────────────────────────────────────┐\n│ [icon] Title              Extra [→] │\n└─────────────────────────────────────┘\n```\n\n- **Icon** (optional): Left icon\n- **Title** (required): Main content, can be string or custom ReactNode\n- **Extra** (optional): Right content, can be string or custom ReactNode\n- **Arrow** (optional, default shown): Right arrow indicator\n\n## Usage Scenarios\n\n### Settings Page\n\n```tsx\nimport { Cell, Flexbox } from '@lobehub/ui-rn';\nimport { Bell, Settings, Shield, User } from 'lucide-react-native';\n\n<Flexbox gap={8}>\n  <Cell icon={User} title=\"Account\" extra=\"user@example.com\" onPress={() => {}} />\n  <Cell icon={Bell} title=\"Notifications\" extra=\"On\" onPress={() => {}} />\n  <Cell icon={Shield} title=\"Privacy\" onPress={() => {}} />\n  <Cell icon={Settings} title=\"General\" onPress={() => {}} />\n</Flexbox>;\n```\n\n### Menu List\n\n```tsx\nimport { Cell, Flexbox } from '@lobehub/ui-rn';\nimport { Download, FileText, Star } from 'lucide-react-native';\n\n<Flexbox gap={8}>\n  <Cell icon={FileText} title=\"Documents\" extra=\"15\" onPress={() => {}} />\n  <Cell icon={Download} title=\"Downloads\" extra=\"8\" onPress={() => {}} />\n  <Cell icon={Star} title=\"Favorites\" extra=\"23\" onPress={() => {}} />\n</Flexbox>;\n```\n\n### Information Display\n\n```tsx\nimport { Cell, Flexbox } from '@lobehub/ui-rn';\n\n<Flexbox gap={8}>\n  <Cell title=\"Version\" extra=\"1.0.0\" showArrow={false} />\n  <Cell title=\"Build Number\" extra=\"12345\" showArrow={false} />\n  <Cell title=\"Last Updated\" extra=\"2024-01-01\" showArrow={false} />\n</Flexbox>;\n```\n\n## API\n\n### CellProps\n\nExtends from `BlockProps` (excluding `children`):\n\n| Prop      | Type                  | Default | Description                                                 |\n| --------- | --------------------- | ------- | ----------------------------------------------------------- |\n| title     | `ReactNode \\| string` | -       | **Required**. Cell title, can be string or custom component |\n| icon      | `IconProps['icon']`   | -       | Left icon                                                   |\n| extra     | `ReactNode \\| string` | -       | Right extra content, can be string or custom component      |\n| showArrow | `boolean`             | `true`  | Whether to show right arrow                                 |\n| onPress   | `() => void`          | -       | Click callback                                              |\n\n### Inherited from BlockProps\n\nCell inherits all props from Block component, such as:\n\n- `variant`: `'filled' | 'outlined' | 'borderless'`\n- `shadow`: Whether to show shadow\n- `glass`: Whether to enable glass effect\n- `padding`, `gap`, `align`, `justify`: Layout properties\n\n## Customization Examples\n\n### Custom Title Component\n\n```tsx\nimport { Cell, Flexbox, Text } from '@lobehub/ui-rn';\n\n<Cell\n  title={\n    <Flexbox gap={4}>\n      <Text strong>Premium Feature</Text>\n      <Text type=\"secondary\" fontSize={12}>\n        Requires subscription\n      </Text>\n    </Flexbox>\n  }\n  onPress={() => {}}\n/>;\n```\n\n### Custom Extra Component\n\n```tsx\nimport { Cell, Text } from '@lobehub/ui-rn';\nimport { Switch } from 'react-native';\n\n<Cell\n  title=\"Dark Mode\"\n  extra={<Switch value={darkMode} onValueChange={setDarkMode} />}\n  showArrow={false}\n/>;\n```\n\n### Styled Cell\n\n```tsx\nimport { Cell } from '@lobehub/ui-rn';\n\n<Cell title=\"Important Setting\" variant=\"outlined\" shadow padding={16} onPress={() => {}} />;\n```\n",
      "group": "Layout",
      "title": "Cell",
      "description": "A list cell component based on Block, commonly used for settings pages and menu lists, supporting icons, extra content, and arrow indicators."
    },
    "Center": {
      "demosPath": "@lobehub/ui-rn/Center/demos",
      "name": "Center",
      "readme": "\n## Features\n\n- ✅ Simple centering layout\n- ✅ Fully compatible with React Native\n- ✅ Separate control of horizontal and vertical centering\n- ✅ Minimum size setting support\n- ✅ Built-in test ID support\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Center } from '@lobehub/ui-rn';\n\n// Fully centered\n<Center>\n  <Component />\n</Center>\n\n// Horizontal centering only\n<Center horizontal={true} vertical={false}>\n  <Component />\n</Center>\n\n// Vertical centering only\n<Center horizontal={false} vertical={true}>\n  <Component />\n</Center>\n\n// Set minimum size\n<Center minHeight={150} minWidth={200}>\n  <Component />\n</Center>\n\n// Block mode\n<Center block style={{ height: 200 }}>\n  <Component />\n</Center>\n```\n\n## Use Cases\n\n### Fully Centered\n\nSuitable for scenarios where content needs to be displayed in the center of the container, such as loading indicators, empty state prompts, etc.\n\n```tsx\n<Center style={{ height: 200, backgroundColor: '#f0f0f0' }}>\n  <LoadingSpinner />\n</Center>\n```\n\n### Horizontal Centering\n\nSuitable for scenarios where horizontal centering is needed but vertical position is fixed, such as page titles.\n\n```tsx\n<Center horizontal={true} vertical={false} style={{ height: 100 }}>\n  <Text>Page Title</Text>\n</Center>\n```\n\n### Vertical Centering\n\nSuitable for scenarios where vertical centering is needed but horizontal position is fixed, such as sidebar content.\n\n```tsx\n<Center horizontal={false} vertical={true} style={{ height: 100 }}>\n  <NavigationMenu />\n</Center>\n```\n\n### Multiple Child Elements Centered\n\nWhen there are multiple child elements, they will be displayed as a whole centered in the container.\n\n```tsx\n<Center>\n  <Text>Title</Text>\n  <Text>Subtitle</Text>\n  <Button title=\"Action Button\" />\n</Center>\n```\n\n### Nested Usage\n\nCan be combined with other layout components for complex layout effects.\n\n```tsx\n<Center style={{ height: 300, backgroundColor: '#f5f5f5' }}>\n  <Center style={{ width: 200, height: 200, backgroundColor: 'white' }}>\n    <Text>Nested Centered Content</Text>\n  </Center>\n</Center>\n```\n",
      "group": "Layout",
      "title": "Center",
      "description": "Component for centering child elements within a container, supporting horizontal, vertical, or full centering."
    },
    "ColorScales": {
      "demosPath": "@lobehub/ui-rn/ColorScales/demos",
      "name": "ColorScales",
      "readme": "\n## Features\n\n- ✅ Display complete color levels\n- ✅ Supports four modes: light/lightA/dark/darkA\n- ✅ Highlights mid-level color\n- ✅ Click to copy color values\n- ✅ Transparent color support\n- ✅ Vertical scrolling support (mobile optimization)\n- ✅ TypeScript support\n- ✅ **New: Automatic color level token generation**\n\n## Basic Usage\n\n```tsx\nimport { ColorScales } from '@/components/styles';\nimport { colorScales } from '@/components/styles';\n\nexport default () => <ColorScales name=\"primary\" scale={colorScales.primary} midHighLight={9} />;\n```\n\n## Color Level Token Usage\n\nYou can now directly use color level tokens in your components:\n\n```tsx\nimport { useThemeToken } from '@/components/styles';\n\nconst MyComponent = () => {\n  const token = useThemeToken();\n\n  return (\n    <View\n      style={{\n        backgroundColor: token.primary1, // Primary color level 1\n        borderColor: token.red5, // Red level 5\n        shadowColor: token.blue3A, // Blue level 3 transparent\n      }}\n    >\n      <Text style={{ color: token.gray9 }}>Using color level tokens</Text>\n    </View>\n  );\n};\n```\n\n## Available Token Formats\n\n- **Base colors**: `token.{colorName}{level}` (e.g., `token.primary5`)\n- **Transparent**: `token.{colorName}{level}A` (e.g., `token.red3A`)\n- **Dark mode**: `token.{colorName}{level}Dark` (e.g., `token.blue7Dark`)\n- **Dark transparent**: `token.{colorName}{level}DarkA` (e.g., `token.green9DarkA`)\n\nWhere:\n\n- `colorName`: primary, red, blue, green, cyan, geekblue, gold, gray, lime, magenta, orange, purple, volcano, yellow\n- `level`: 1-11\n\n## Palette Types\n\nThe component supports four palette modes:\n\n- **light**: Light mode solid colors\n- **lightA**: Light mode transparent colors\n- **dark**: Dark mode solid colors\n- **darkA**: Dark mode transparent colors\n\n## Interactive Features\n\n- Click any color swatch to copy the corresponding token value\n- Copy format: `token.colorName + index + (A?) /* #hex */`\n- Supports vertical scrolling to view complete palette\n\n## Available Palettes\n\nCurrently supported palettes include: primary, red, blue, green, cyan, geekblue, gold, gray, lime, magenta, orange, purple, volcano, yellow\n",
      "group": "Display",
      "title": "ColorScales",
      "description": "React Native color palette display component, rewritten from LobeUI's ColorScales component."
    },
    "ColorSwatches": {
      "demosPath": "@lobehub/ui-rn/ColorSwatches/demos",
      "name": "ColorSwatches",
      "readme": "\n## Features\n\n- ✅ Multiple color presets support\n- ✅ Circle/Square two styles\n- ✅ Custom size and spacing\n- ✅ Transparent color support\n- ✅ Selected state display\n- ✅ Accessibility support\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { ColorSwatches } from '@lobehub/ui-rn';\n\n// Basic usage\n<ColorSwatches\n  colors={[\n    { color: '#ff0000', title: 'Red' },\n    { color: '#00ff00', title: 'Green' },\n    { color: '#0000ff', title: 'Blue' },\n  ]}\n  onChange={(color) => console.log(color)}\n/>\n\n// Square style\n<ColorSwatches\n  colors={colors}\n  shape=\"square\"\n  size={28}\n  gap={8}\n  onChange={handleColorChange}\n/>\n\n// Transparent color support\n<ColorSwatches\n  colors={[\n    { color: 'rgba(0, 0, 0, 0)', title: 'Transparent' },\n    { color: '#ff0000', title: 'Red' },\n  ]}\n  onChange={handleColorChange}\n/>\n```\n\n## Core Features\n\n### Color System Integration\n\nColorSwatches is fully integrated with the project's color system, supporting:\n\n- Predefined color palettes\n- Theme color adaptation\n- Dark mode support\n\n### Transparent Color Handling\n\nThe component has special handling for transparent colors:\n\n- Automatic transparent color detection\n- Special styling for transparent colors\n- Correct contrast color calculation\n\n### Accessibility\n\nThe component provides comprehensive accessibility support:\n\n- Screen reader support\n- Keyboard navigation\n- Color description labels\n\n## Style Customization\n\n### Size Configuration\n\n- `size`: Controls swatch size\n- `gap`: Controls swatch spacing\n- `shape`: Controls swatch shape (circle/square)\n\n### Custom Styles\n\nYou can customize container styles through the `style` prop:\n\n```tsx\n<ColorSwatches\n  colors={colors}\n  style={{\n    backgroundColor: '#f5f5f5',\n    padding: 10,\n    borderRadius: 8,\n  }}\n/>\n```\n",
      "group": "Form",
      "title": "ColorSwatches",
      "description": "React Native color picker component, rewritten from LobeUI's ColorSwatches component."
    },
    "Divider": {
      "demosPath": "@lobehub/ui-rn/Divider/demos",
      "name": "Divider",
      "readme": "\n## Features\n\n- ✅ 支持水平和垂直两种方向\n- ✅ 使用 hairline 细线效果\n- ✅ 主题自动适配\n- ✅ 轻量级实现\n- ✅ TypeScript 支持\n\n## Basic Usage\n\n```tsx\nimport { Divider } from '@lobehub/ui-rn';\n\n<Divider />;\n```\n\n## API\n\n### DividerProps\n\n| 属性   | 类型                         | 默认值         | 描述       |\n| ------ | ---------------------------- | -------------- | ---------- |\n| `type` | `'horizontal' \\| 'vertical'` | `'horizontal'` | 分割线方向 |\n\n继承 `ViewProps` 的所有属性（除了 `children`），支持自定义样式。\n\n## Examples\n\n### 基础用法\n\n默认的水平分割线。\n\n### 垂直分割线\n\n使用垂直分割线分隔水平排列的内容。\n\n### 内容分组\n\n使用分割线对内容进行分组。\n\n### 自定义样式\n\n通过 style 属性自定义分割线的颜色和粗细。\n",
      "group": "Layout",
      "title": "Divider",
      "description": "分割线组件，用于在内容区域进行视觉分隔，支持水平和垂直两种方向。"
    },
    "Empty": {
      "demosPath": "@lobehub/ui-rn/Empty/demos",
      "name": "Empty",
      "readme": "\n## Features\n\n- ✅ 支持自定义图标和图标大小\n- ✅ 支持文本或自定义 ReactNode 描述\n- ✅ 内置居中对齐布局\n- ✅ 支持添加额外操作按钮\n- ✅ 主题自动适配\n- ✅ TypeScript 支持\n\n## Basic Usage\n\n```tsx\nimport { Empty } from '@lobehub/ui-rn';\n\n<Empty description=\"暂无数据\" />;\n```\n\n## API\n\n### EmptyProps\n\n| 属性          | 类型                  | 默认值      | 描述                         |\n| ------------- | --------------------- | ----------- | ---------------------------- |\n| `description` | `ReactNode \\| string` | -           | 描述文本或自定义内容         |\n| `icon`        | `IconProps['icon']`   | `InboxIcon` | 自定义图标，默认为收件箱图标 |\n| `iconSize`    | `number`              | `32`        | 图标大小                     |\n| `children`    | `ReactNode`           | -           | 额外的操作内容（如按钮）     |\n\n继承 `FlexboxProps` 的所有属性，支持布局配置。\n\n## Examples\n\n### 基础用法\n\n使用默认图标和描述文本展示空状态。\n\n### 自定义图标\n\n使用 Lucide 图标库中的任意图标。\n\n### 自定义描述\n\n使用自定义 ReactNode 作为描述内容。\n\n### 带操作按钮\n\n在空状态下添加操作按钮引导用户。\n",
      "group": "Display",
      "title": "Empty",
      "description": "空状态展示组件，用于显示无数据或空内容的占位界面，支持自定义图标和描述文本。"
    },
    "Flexbox": {
      "demosPath": "@lobehub/ui-rn/Flexbox/demos",
      "name": "Flexbox",
      "readme": "\n## Features\n\n- ✅ Simple Flexbox property encapsulation\n- ✅ Fully compatible with React Native\n- ✅ Supports all Flexbox layout properties\n- ✅ Supports automatic wrapping and flex properties\n- ✅ Built-in test ID support\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Flexbox } from '@lobehub/ui-rn';\n\n// Horizontal arrangement\n<Flexbox direction=\"row\" justify=\"center\" align=\"center\">\n  <Component1 />\n  <Component2 />\n  <Component3 />\n</Flexbox>\n\n// Vertical arrangement\n<Flexbox direction=\"column\" justify=\"space-between\">\n  <Component1 />\n  <Component2 />\n  <Component3 />\n</Flexbox>\n\n// Auto wrap\n<Flexbox direction=\"row\" wrap=\"wrap\" justify=\"space-around\">\n  <Component1 />\n  <Component2 />\n  <Component3 />\n  <Component4 />\n</Flexbox>\n\n// Fill mode\n<Flexbox block direction=\"row\" justify=\"center\">\n  <Component1 />\n  <Component2 />\n</Flexbox>\n```\n\n## Layout Direction\n\n- `row`: Horizontal arrangement, left to right\n- `column`: Vertical arrangement, top to bottom\n- `row-reverse`: Horizontal arrangement, right to left\n- `column-reverse`: Vertical arrangement, bottom to top\n\n## Alignment Methods\n\n### Main Axis Alignment (justify)\n\n- `flex-start`: Align at start\n- `flex-end`: Align at end\n- `center`: Center align\n- `space-between`: Justify with equal spacing between items\n- `space-around`: Equal spacing around each item\n- `space-evenly`: All spacing is equal\n\n### Cross Axis Alignment (align)\n\n- `stretch`: Stretch to fill container\n- `flex-start`: Align at start\n- `flex-end`: Align at end\n- `center`: Center align\n- `baseline`: Baseline align\n",
      "group": "Layout",
      "title": "Flexbox",
      "description": "Container component based on React Native Flexbox layout, providing a simple API to control the arrangement and alignment of child elements."
    },
    "FluentEmoji": {
      "demosPath": "@lobehub/ui-rn/FluentEmoji/demos",
      "name": "FluentEmoji",
      "readme": "\n## Features\n\n- ✅ Fluent 3D emoji design\n- ✅ Custom size support\n- ✅ Plain emoji fallback\n- ✅ High-quality image rendering\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { FluentEmoji } from '@lobehub/ui-rn';\n\n// Basic usage\n<FluentEmoji emoji=\"😊\" size={40} />\n\n// Custom size\n<FluentEmoji emoji=\"🚀\" size={64} />\n\n// Use plain emoji\n<FluentEmoji emoji=\"🎁\" size={48} plainEmoji />\n\n// Error fallback\n<FluentEmoji emoji=\"🎨\" size={40} fallback=\"🎨\" />\n```\n\n## Design Philosophy\n\nThe FluentEmoji component provides Microsoft Fluent design system 3D emojis, which compared to traditional flat emojis, offer:\n\n- Richer visual hierarchy\n- More modern design style\n- Better user experience\n- Cross-platform consistency\n\nWhen 3D emoji loading fails, it automatically falls back to the original Unicode emoji, ensuring functionality availability.\n",
      "group": "Display",
      "title": "FluentEmoji",
      "description": "Microsoft Fluent-style 3D emoji component with custom size and fallback support."
    },
    "Form": {
      "demosPath": "@lobehub/ui-rn/Form/demos",
      "name": "Form",
      "readme": "\n## Features\n\n- `Form.Item` field registration, helper text, error messages\n- Required marker and validation rules (required, pattern, validator)\n- `Form.useForm` custom instance providing `validateFields`, `submit`, and other methods\n- Custom `extra` text for displaying hints alongside errors\n",
      "group": "Form",
      "title": "Form",
      "description": "React Native form container inspired by Ant Design, supporting field registration, helper text, error messages, required markers, validation rules, and custom form instances."
    },
    "Highlighter": {
      "demosPath": "@lobehub/ui-rn/Highlighter/demos",
      "name": "Highlighter",
      "readme": "\n## Features\n\n- ✅ Supports 100+ programming languages\n- ✅ Multiple theme support\n- ✅ Code copy functionality\n- ✅ Language dynamic switching\n- ✅ Filename display\n- ✅ Expand/collapse functionality\n- ✅ Compact and default display modes\n- ✅ Custom style support\n- ✅ TypeScript support\n- ✅ High-performance rendering\n\n## Quick Start\n\n```tsx\nimport { Highlighter } from '@lobehub/ui-rn';\n\n// Basic usage\n<Highlighter code=\"console.log('Hello World');\" lang=\"javascript\" />;\n```\n\n## Feature Mode Comparison\n\n### Basic Mode (`fullFeatured={false}`)\n\n- Pure code highlighting display\n- Lightweight rendering\n- Suitable for simple code snippet display\n- No interactive features\n\n### Full Featured Mode (`fullFeatured={true}`)\n\n- Includes header toolbar\n- Supports code copying\n- Supports expand/collapse\n- Supports language switching\n- Supports filename display\n- Suitable for complete code documentation display\n\n## Performance Optimization\n\n- **Token Caching**: Automatically caches syntax analysis results\n- **Lazy Loading**: Load language definitions on demand\n- **Memory Management**: Automatically clean up unused language definitions\n\n## Best Practices\n\n### 1. Choose the Right Mode\n\n```tsx\n// Documentation display: Use full featured mode\n<Highlighter fullFeatured fileName=\"example.js\" />\n\n// Inline code: Use basic mode\n<Highlighter code=\"const x = 1\" lang=\"js\" />\n\n// Command line: Use compact mode\n<Highlighter type=\"compact\" lang=\"bash\" />\n```\n\n### 2. Optimize User Experience\n\n```tsx\n// Long code collapsed by default, let users expand manually\n<Highlighter\n  defalutExpand={false}\n  fullFeatured\n  fileName=\"long-filename.js\"\n/>\n\n// Provide language switching for debugging convenience\n<Highlighter\n  allowChangeLanguage\n  fullFeatured\n/>\n```\n",
      "group": "Display",
      "title": "Highlighter",
      "description": "High-performance code highlighting component based on Shiki, providing rich syntax highlighting features for React Native applications."
    },
    "Icon": {
      "demosPath": "@lobehub/ui-rn/Icon/demos",
      "name": "Icon",
      "readme": "\n## Features\n\n- ✅ Default adaptation for `lucide-react-native` icons, also supports custom components or nodes\n- ✅ Unified color and size control\n- ✅ Optional rotation animation (`spin`)\n- ✅ TypeScript type hints friendly\n- ✅ Can be used with button components like ActionIcon\n\n## Basic Usage\n\n```tsx\nimport { Icon } from '@lobehub/ui-rn';\nimport { Star } from 'lucide-react-native';\n// You can also pass React nodes\nimport { createElement } from 'react';\n\n<Icon icon={Star} />;\n<Icon icon={Star} size=\"large\" color=\"#FADB14\" />;\n<Icon icon={Star} spin />;\n\n<Icon icon={createElement(Star, { size: 20 })} />;\n```\n\n## Use Cases\n\n- Render icons individually to display state\n- Supplement components for ActionIcon or Button\n- Display rotating indicator icons in loading states\n- Display example colors in combination with color panels\n",
      "group": "Basic",
      "title": "Icon",
      "description": "Component for encapsulating common icon rendering logic, unifying size, rotation animation, and color control. Supports passing in Lucide icon components or any React node directly, with optional rotation animation."
    },
    "Input": {
      "demosPath": "@lobehub/ui-rn/Input/demos",
      "name": "Input",
      "readme": "\n## Features\n\n- ✅ **Prefix Support** - Supports adding prefix icons or text\n- ✅ **Suffix Support** - Supports adding suffix icons or buttons\n- ✅ **Compound Components** - Provides dedicated Search and Password components\n- ✅ **Unified Styles** - Consistent design system-based styling\n- ✅ **Flexible Layout** - Flexible layout using View wrapper\n- ✅ **TypeScript** - Complete TypeScript type support\n- ✅ **Theme Adaptation** - Automatic light/dark theme adaptation\n- ✅ **Platform Optimization** - Style optimization for Android and iOS\n- ✅ **TextArea Support** - Provides multi-line input with autoSize support\n\n## Basic Usage\n\n### 1. Basic Input\n\n```jsx\nimport { Input } from '@lobehub/ui-rn';\n\n<Input placeholder=\"Enter content\" />\n<Input defaultValue=\"Preset value\" />\n```\n\n### 2. Input with Prefix\n\n```jsx\nimport { Text } from 'react-native';\n\n<Input placeholder=\"Enter username\" prefix={<Text>@</Text>} />;\n```\n\n### 3. Input with Suffix\n\n```jsx\nimport { TouchableOpacity } from 'react-native';\n\n<Input\n  placeholder=\"Enter email prefix\"\n  suffix={<Text>@gmail.com</Text>}\n/>\n\n<Input\n  placeholder=\"Enter message\"\n  suffix={<TouchableOpacity><SendIcon /></TouchableOpacity>}\n/>\n```\n\n### 4. Compound Components\n\n```jsx\n// Search input\n<Input.Search placeholder=\"Search...\" />\n\n// Password input (auto toggle show/hide)\n<Input.Password placeholder=\"Enter password\" />\n```\n\n### 5. Appearance Variants\n\n```jsx\n// Default (filled)\n<Input placeholder=\"Enter content\" />\n\n// Borderless\n<Input variant=\"borderless\" placeholder=\"Enter content\" />\n<Input.Search variant=\"borderless\" placeholder=\"Search...\" />\n<Input.Password variant=\"borderless\" placeholder=\"Enter password\" />\n\n// Outlined\n<Input variant=\"outlined\" placeholder=\"Enter content\" />\n<Input.Search variant=\"outlined\" placeholder=\"Search...\" />\n<Input.Password variant=\"outlined\" placeholder=\"Enter password\" />\n```\n\n### 6. Sizes\n\n```jsx\n// Small\n<Input size=\"small\" placeholder=\"Small\" />\n<Input.Search size=\"small\" placeholder=\"Small Search\" />\n<Input.Password size=\"small\" placeholder=\"Small Password\" />\n\n// Middle (default)\n<Input size=\"middle\" placeholder=\"Middle\" />\n<Input.Search size=\"middle\" placeholder=\"Middle Search\" />\n<Input.Password size=\"middle\" placeholder=\"Middle Password\" />\n\n// Large\n<Input size=\"large\" placeholder=\"Large\" />\n<Input.Search size=\"large\" placeholder=\"Large Search\" />\n<Input.Password size=\"large\" placeholder=\"Large Password\" />\n```\n\n### 7. Custom Styles\n\n```jsx\n<Input placeholder=\"Custom style\" style={{ backgroundColor: 'red' }} />\n```\n\n### 8. Multi-line Text Input\n\n```jsx\n<Input.TextArea autoSize placeholder=\"Enter detailed description\" />\n\n<Input.TextArea\n  autoSize={{ minRows: 2, maxRows: 6 }}\n  placeholder=\"Supports autoSize range configuration\"\n  variant=\"outlined\"\n/>\n\n<Input.TextArea\n  autoSize\n  placeholder=\"Supports content style customization\"\n  style={{ backgroundColor: '#F7F8FA' }}\n/>\n```\n\n## Compound Components\n\n### Input.Search\n\nSearch input with automatic search icon prefix and returnKeyType set to search.\n\n### Input.Password\n\nPassword input with automatic eye icon suffix, supports toggling show/hide password.\n\n### Input.TextArea\n\nMulti-line text input, `multiline` enabled by default, suitable for long text scenarios.\n\n## Design Principles\n\n- **Consistency**: Unified appearance and interaction experience\n- **Flexibility**: Supports various customization needs\n- **Ease of Use**: Simple and intuitive API design\n",
      "group": "Form",
      "title": "Input",
      "description": "Enhanced React Native text input component with prefix, suffix, and compound component support."
    },
    "InstantSwitch": {
      "demosPath": "@lobehub/ui-rn/InstantSwitch/demos",
      "name": "InstantSwitch",
      "readme": "\n## Features\n\n- ✅ Async toggle operation support\n- ✅ Loading state management\n- ✅ Optimistic update mechanism\n- ✅ Error handling and rollback\n- ✅ Prevent duplicate clicks\n- ✅ Three size support\n- ✅ Custom colors\n- ✅ Disabled state support\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { InstantSwitch } from '@lobehub/ui-rn';\n\n// Basic usage\n<InstantSwitch\n  enabled={enabled}\n  onChange={async (enabled) => {\n    // Async operation\n    await toggleProvider(id, enabled);\n  }}\n/>\n\n// Custom colors\n<InstantSwitch\n  enabled={enabled}\n  onChange={handleChange}\n  trackColor={{\n    false: '#ff6b6b',\n    true: '#51cf66',\n  }}\n  thumbColor=\"#ffffff\"\n  loadingColor=\"#339af0\"\n/>\n\n// Different sizes\n<InstantSwitch size=\"small\" />\n<InstantSwitch size=\"default\" />\n<InstantSwitch size=\"large\" />\n\n// Disabled state\n<InstantSwitch disabled />\n```\n\n## Core Features\n\n### Async Operation Handling\n\nInstantSwitch is specifically designed for async operations, supporting:\n\n- Async toggle callbacks\n- Loading state display\n- Optimistic update mechanism\n- Error rollback handling\n\n### Optimistic Updates\n\nThe component uses an optimistic update strategy:\n\n1. UI state updates immediately upon user click\n2. Async operation executes in background\n3. Maintains new state on success\n4. Rolls back to original state on failure\n\n### Prevent Duplicate Clicks\n\nDuring async operations, the component will:\n\n- Disable switch operation\n- Display loading indicator\n- Prevent duplicate triggers\n\n## Size Specifications\n\n- `small`: Small size (scale 0.8)\n- `default`: Default size (scale 1.0)\n- `large`: Large size (scale 1.2)\n\n## Use Cases\n\n- Provider enable/disable\n- Feature toggle control\n- Settings toggle\n- Operations requiring async confirmation\n",
      "group": "Form",
      "title": "InstantSwitch",
      "description": "React Native instant switch component supporting async toggle operations, inspired by web InstantSwitch implementation."
    },
    "ListItem": {
      "demosPath": "@lobehub/ui-rn/ListItem/demos",
      "name": "ListItem",
      "readme": "\n## Features\n\n- ✅ **Flexible Avatar** - Supports image URL, emoji, custom React components\n- ✅ **Rich Content** - Supports title, description, extra content display\n- ✅ **Route Integration** - Deep integration with Expo Router, supports navigation\n- ✅ **Interactive Response** - Supports click events and touch feedback\n- ✅ **Responsive Layout** - Adaptive content length and screen size\n- ✅ **Dark Theme** - Modern dark design style\n- ✅ **TypeScript** - Complete TypeScript type support\n- ✅ **High Performance** - Optimized rendering performance and memory usage\n- ✅ **Custom Styles** - Flexible style configuration options\n- ✅ **Text Truncation** - Automatic long text display handling\n\nFor complete documentation, please switch to the README tab.\n",
      "group": "Layout",
      "title": "ListItem",
      "description": "Feature-rich React Native list item component with avatar, description, extra content display, and route navigation support."
    },
    "Markdown": {
      "demosPath": "@lobehub/ui-rn/Markdown/demos",
      "name": "Markdown",
      "readme": "\n## Features\n\n- ✅ **Math Formula Rendering** - Supports MathJax math formula display\n- ✅ **Code Highlighting** - Integrated custom Highlighter component\n- ✅ **Responsive Images** - Auto-calculate image height, responsive display\n- ✅ **Video Support** - Supports video content rendering\n- ✅ **Table Support** - Complete table styling and layout\n- ✅ **Dark Theme** - Auto-adapts to dark/light themes\n- ✅ **Custom Styles** - Rich style configuration options\n- ✅ **Link Support** - Clickable links with auto-navigation\n- ✅ **List Support** - Ordered and unordered lists\n- ✅ **Quote Blocks** - Supports blockquote styling\n\n## Basic Usage\n\n```jsx\nimport { Markdown } from '@lobehub/ui-rn';\n\nexport default function App() {\n  const markdownContent = `\n# Title Example\n\nThis is **bold text** and *italic text* example.\n\n## Code Example\n\n\\`\\`\\`javascript\nfunction hello() {\n  console.log('Hello World!');\n}\n\\`\\`\\`\n\n## Math Formula\n\nInline formula: $E = mc^2$\n\nBlock formula:\n$$\\\\int_{-\\\\infty}^{\\\\infty} e^{-x^2} dx = \\\\sqrt{\\\\pi}$$\n  `;\n\n  return <Markdown content={markdownContent} />;\n}\n```\n\n## Supported Features\n\n### Math Formula Rendering\n\nBased on MathJax engine, supports complex math expressions:\n\n- Inline formulas: `$E = mc^2$`\n- Block formulas: `$$\\int_0^1 x^2 dx$$`\n\n### Code Highlighting\n\nIntegrated Highlighter component, supports 100+ programming languages syntax highlighting.\n\n### Images and Videos\n\n- Auto-calculate image dimensions\n- Responsive adaptation\n- Supports video content\n\n### Table Support\n\nComplete table rendering and styling support, including borders, alignment, etc.\n\nFor more detailed information, please check the complete README documentation.\n",
      "group": "Display",
      "title": "Markdown",
      "description": "Powerful React Native Markdown rendering component with math formulas, code highlighting, images, videos, and more content types support."
    },
    "MaskShadow": {
      "demosPath": "@lobehub/ui-rn/MaskShadow/demos",
      "name": "MaskShadow",
      "readme": "\n## Features\n\n- ✅ Four directional shadows (top, bottom, left, right)\n- ✅ Customizable shadow size\n- ✅ High-performance gradient effects using native MaskedView\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { MaskShadow } from '@lobehub/ui-rn';\nimport { View, Text } from 'react-native';\n\n// Bottom shadow\n<MaskShadow position=\"bottom\" size={40}>\n  <View>\n    <Text>Content with bottom shadow</Text>\n  </View>\n</MaskShadow>\n\n// Top shadow\n<MaskShadow position=\"top\" size={30}>\n  <View>\n    <Text>Content with top shadow</Text>\n  </View>\n</MaskShadow>\n\n// Left shadow\n<MaskShadow position=\"left\" size={50}>\n  <View>\n    <Text>Content with left shadow</Text>\n  </View>\n</MaskShadow>\n\n// Right shadow\n<MaskShadow position=\"right\" size={40}>\n  <View>\n    <Text>Content with right shadow</Text>\n  </View>\n</MaskShadow>\n```\n\n## Shadow Positions\n\n- `top`: Gradient from top edge, fading upward\n- `bottom`: Gradient from bottom edge, fading downward\n- `left`: Gradient from left edge, fading leftward\n- `right`: Gradient from right edge, fading rightward\n",
      "group": "Layout",
      "title": "MaskShadow",
      "description": "Component for adding gradient mask shadow effects to content, supporting four directional shadows with customizable size."
    },
    "ScrollShadow": {
      "demosPath": "@lobehub/ui-rn/ScrollShadow/demos",
      "name": "ScrollShadow",
      "readme": "\n## Features\n\n- ✅ Vertical and horizontal scroll support\n- ✅ Auto show/hide shadows based on scroll position\n- ✅ Customizable shadow size and offset\n- ✅ ScrollBar hiding support\n- ✅ Scroll state change callback\n- ✅ High-performance gradient effects using native MaskedView\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { ScrollShadow } from '@lobehub/ui-rn';\nimport { View, Text } from 'react-native';\n\n// Basic vertical scroll\n<ScrollShadow>\n  <View>\n    <Text>Scrollable content</Text>\n    <Text>More content...</Text>\n    <Text>Even more content...</Text>\n  </View>\n</ScrollShadow>\n\n// Horizontal scroll\n<ScrollShadow orientation=\"horizontal\">\n  <View style={{ flexDirection: 'row' }}>\n    {items.map(item => <Item key={item.id} {...item} />)}\n  </View>\n</ScrollShadow>\n\n// Custom shadow size and offset\n<ScrollShadow size={30} offset={10}>\n  <View>\n    <Text>Content</Text>\n  </View>\n</ScrollShadow>\n\n// Hide scroll bar\n<ScrollShadow hideScrollBar>\n  <View>\n    <Text>Clean scrolling experience</Text>\n  </View>\n</ScrollShadow>\n\n// Always visible shadows\n<ScrollShadow visibility=\"always\">\n  <View>\n    <Text>Shadows always shown</Text>\n  </View>\n</ScrollShadow>\n\n// Scroll state callback\n<ScrollShadow\n  onVisibilityChange={(visibility) => {\n    console.log('Shadow state:', visibility);\n  }}\n>\n  <View>\n    <Text>Content with callback</Text>\n  </View>\n</ScrollShadow>\n```\n\n## Scroll Orientations\n\n- `vertical`: Vertical scrolling with top/bottom shadows\n- `horizontal`: Horizontal scrolling with left/right shadows\n\n## Visibility Modes\n\n- `auto`: Automatically show/hide shadows based on scroll position (default)\n- `always`: Always show shadows regardless of scroll state\n- `never`: Never show shadows\n",
      "group": "Layout",
      "title": "ScrollShadow",
      "description": "Scroll container component with smart gradient shadow effects that automatically show/hide based on scroll state."
    },
    "Segmented": {
      "demosPath": "@lobehub/ui-rn/Segmented/demos",
      "name": "Segmented",
      "readme": "\n## Features\n\n- ✅ 平滑的选中指示器滑动动画\n- ✅ 文本颜色和字重渐变动画\n- ✅ 支持字符串、数字和自定义节点作为选项\n- ✅ 支持图标配置（可单独使用或与文本组合）\n- ✅ 支持垂直和水平排列\n- ✅ 提供多种尺寸（small、middle、large）\n- ✅ 支持圆角和默认两种形状\n- ✅ 支持禁用状态和单个选项禁用\n- ✅ 受控和非受控两种模式\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## Basic Usage\n\n```tsx\nimport { Segmented } from '@lobehub/ui-rn';\nimport { useState } from 'react';\n\nconst Demo = () => {\n  const [value, setValue] = useState('iOS');\n\n  return <Segmented options={['iOS', 'Android', 'Web']} value={value} onChange={setValue} />;\n};\n```\n\n## API\n\n### SegmentedProps\n\n| 属性         | 类型                                          | 默认值      | 描述                         |\n| ------------ | --------------------------------------------- | ----------- | ---------------------------- |\n| block        | `boolean`                                     | `false`     | 将宽度调整为父元素宽度的选项 |\n| defaultValue | `string \\| number`                            | -           | 默认选中的值                 |\n| disabled     | `boolean`                                     | `false`     | 是否禁用                     |\n| onChange     | `(value: string \\| number) => void`           | -           | 选项变化时的回调函数         |\n| options      | `string[] \\| number[] \\| SegmentedItemType[]` | `[]`        | 数据化配置选项内容           |\n| size         | `'small' \\| 'middle' \\| 'large'`              | `'middle'`  | 控件尺寸                     |\n| vertical     | `boolean`                                     | `false`     | 排列方向                     |\n| value        | `string \\| number`                            | -           | 当前选中的值                 |\n| shape        | `'default' \\| 'round'`                        | `'default'` | 形状样式                     |\n| style        | `ViewStyle`                                   | -           | 自定义样式                   |\n\n### SegmentedItemType\n\n| 属性     | 类型                  | 默认值  | 描述             |\n| -------- | --------------------- | ------- | ---------------- |\n| label    | `ReactNode \\| string` | -       | 分段项的显示文本 |\n| value    | `string \\| number`    | -       | 分段项的值       |\n| icon     | `IconProps['icon']`   | -       | 分段项的显示图标 |\n| disabled | `boolean`             | `false` | 分段项的禁用状态 |\n",
      "group": "Form",
      "title": "Segmented",
      "description": "分段控制器组件，用于展示并选择多个选项中的一个，适用于在少量选项之间切换。"
    },
    "Select": {
      "demosPath": "@lobehub/ui-rn/Select/demos",
      "name": "Select",
      "readme": "\n## Features\n\n- ✅ 基于 BottomSheet 的移动端友好交互\n- ✅ 支持图标和自定义内容\n- ✅ 支持禁用状态（整体和单个选项）\n- ✅ 支持受控和非受控模式\n- ✅ 支持自定义选项渲染\n- ✅ 支持多种尺寸和样式变体\n- ✅ TypeScript 支持\n- ✅ 主题适配\n\n## Basic Usage\n\n```tsx\nimport { Select } from '@lobehub/ui-rn';\nimport { Apple, Coffee } from 'lucide-react-native';\n\nconst options = [\n  {\n    icon: <Apple size={20} />,\n    title: '苹果',\n    value: 'apple',\n  },\n  {\n    icon: <Coffee size={20} />,\n    title: '咖啡',\n    value: 'coffee',\n  },\n];\n\n<Select\n  onChange={(value) => console.log('Selected:', value)}\n  options={options}\n  title=\"选择项目\"\n/>\n```\n\n## API\n\n### SelectProps\n\n| 属性 | 类型 | 默认值 | 说明 |\n|---|---|---|---|\n| options | `SelectOptionItem[]` | - | 选项列表（必填） |\n| value | `string \\| number` | - | 受控模式的值 |\n| defaultValue | `string \\| number` | `options[0].value` | 默认选中的值 |\n| onChange | `(value: string \\| number) => void` | - | 值变化回调 |\n| title | `string` | `'请选择'` | BottomSheet 标题 |\n| size | `'small' \\| 'middle' \\| 'large'` | `'middle'` | 选择器尺寸 |\n| variant | `'filled' \\| 'outlined' \\| 'borderless'` | 根据主题自动 | 样式变体 |\n| disabled | `boolean` | `false` | 是否禁用整个选择器 |\n| optionRender | `(item: SelectOptionItem, index: number) => ReactNode` | - | 自定义选项渲染函数 |\n| style | `StyleProp<ViewStyle>` | - | 自定义样式 |\n\n### SelectOptionItem\n\n| 属性 | 类型 | 默认值 | 说明 |\n|---|---|---|---|\n| value | `string \\| number` | - | 选项的值（必填） |\n| title | `string \\| ReactNode` | - | 选项标题（必填） |\n| icon | `ReactNode` | - | 选项图标 |\n| disabled | `boolean` | `false` | 是否禁用该选项 |\n\n## Examples\n\n### 基础用法\n\n最简单的用法，提供选项列表。\n\n```tsx\nimport { Select } from '@lobehub/ui-rn';\nimport { Apple, Coffee, Utensils } from 'lucide-react-native';\nimport { useState } from 'react';\n\nconst [value, setValue] = useState('apple');\n\nconst options = [\n  { icon: <Apple size={20} />, title: '苹果', value: 'apple' },\n  { icon: <Coffee size={20} />, title: '咖啡', value: 'coffee' },\n  { icon: <Utensils size={20} />, title: '餐具', value: 'utensils' },\n];\n\n<Select\n  onChange={setValue}\n  options={options}\n  value={value}\n/>\n```\n\n### 不同尺寸\n\n通过 `size` 属性控制选择器的尺寸。\n\n```tsx\n<Select options={options} size=\"small\" />\n<Select options={options} size=\"middle\" />\n<Select options={options} size=\"large\" />\n```\n\n### 不同变体\n\n通过 `variant` 属性控制样式变体。\n\n```tsx\n<Select options={options} variant=\"filled\" />\n<Select options={options} variant=\"outlined\" />\n<Select options={options} variant=\"borderless\" />\n```\n\n### 禁用状态\n\n可以禁用整个选择器，也可以禁用单个选项。\n\n```tsx\n// 禁用整个选择器\n<Select disabled options={options} />\n\n// 禁用部分选项\nconst options = [\n  { title: '选项 1', value: '1' },\n  { title: '选项 2', value: '2' },\n  { title: '禁用选项', value: '3', disabled: true },\n];\n\n<Select options={options} />\n```\n\n### 自定义渲染\n\n使用 `optionRender` 自定义选项的渲染方式。\n\n```tsx\n<Select\n  options={options}\n  optionRender={(item) => (\n    <View>\n      <Text style={{ fontWeight: 'bold' }}>{item.title}</Text>\n      <Text style={{ fontSize: 12, color: 'gray' }}>\n        Value: {item.value}\n      </Text>\n    </View>\n  )}\n/>\n```\n\n### 受控模式\n\n通过 `value` 和 `onChange` 实现受控组件。\n\n```tsx\nconst [value, setValue] = useState('option1');\n\n<Select\n  onChange={setValue}\n  options={options}\n  value={value}\n/>\n```\n\n### 非受控模式\n\n使用 `defaultValue` 设置初始值。\n\n```tsx\n<Select\n  defaultValue=\"option2\"\n  onChange={(value) => console.log('Changed to:', value)}\n  options={options}\n/>\n```\n\n## Notes\n\n- Select 组件基于 `BottomSheet` 组件实现，在移动端提供了更友好的交互体验\n- 点击选择器会弹出 BottomSheet 展示所有选项\n- 默认情况下，如果没有提供 `defaultValue` 或 `value`，会自动选中第一个选项\n- 当选项被禁用时（`disabled: true`），该选项会显示为灰色且不可点击\n- `title` 属性控制 BottomSheet 的标题，默认为\"请选择\"\n- 可以通过 `optionRender` 完全自定义选项的渲染逻辑\n\n## Related Components\n\n- [BottomSheet](../BottomSheet/index.md) - 底部抽屉组件\n- [Block](../Block/index.md) - 容器组件\n- [Flexbox](../Flexbox/index.md) - 弹性布局组件\n\n",
      "group": "Form",
      "title": "Select",
      "description": "选择器组件，基于 BottomSheet 实现的移动端友好的下拉选择。"
    },
    "Skeleton": {
      "demosPath": "@lobehub/ui-rn/Skeleton/demos",
      "name": "Skeleton",
      "readme": "\n## Features\n\n- ✅ Basic skeleton screen display\n- ✅ Avatar skeleton support\n- ✅ Title and paragraph skeleton\n- ✅ Button skeleton\n- ✅ Animation effect support\n- ✅ Custom row count and width\n- ✅ Loading state control\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Skeleton } from '@lobehub/ui-rn';\n\n// Basic usage\n<Skeleton />\n\n// Disable animation\n<Skeleton animated={false} />\n\n// Show content when loading complete\n<Skeleton loading={false}>\n  <Text>Actual content</Text>\n</Skeleton>\n\n// With avatar\n<Skeleton avatar />\n\n// Custom avatar\n<Skeleton avatar={{ size: 64, shape: 'square' }} />\n\n// Custom paragraph\n<Skeleton paragraph={{ rows: 5 }} />\n\n// Custom row widths\n<Skeleton\n  paragraph={{\n    width: ['100%', '90%', '75%', '50%']\n  }}\n/>\n\n// Use compound components\n<Skeleton.Avatar size={48} shape=\"circle\" />\n<Skeleton.Title width=\"80%\" />\n<Skeleton.Paragraph rows={4} />\n<Skeleton.Button />\n<Skeleton.Button block size=\"large\" />\n```\n\n## Compound Components\n\n### Skeleton.Avatar\n\nStandalone avatar skeleton component.\n\n### Skeleton.Title\n\nStandalone title skeleton component.\n\n### Skeleton.Paragraph\n\nStandalone paragraph skeleton component.\n\n### Skeleton.Button\n\nStandalone button skeleton component.\n\n## Use Cases\n\n### List Loading\n\nSuitable for displaying skeleton screens during list data loading to improve user experience.\n\n### Card Content\n\nDisplay corresponding skeleton screen structure when card content is loading.\n\n### Profile\n\nUse avatar + text combination to display profile loading state.\n\n### Article Content\n\nUse title + paragraph combination to display article content loading state.\n\n## Animation Effect\n\nThe component supports gradient animation effects, controlled by the `animated` prop. Animations are implemented using React Native Animated API with excellent performance.\n\n## Custom Styles\n\nYou can customize skeleton colors through `backgroundColor` and `highlightColor` props, or customize container styles through the `style` prop.\n",
      "group": "Feedback",
      "title": "Skeleton",
      "description": "React Native skeleton screen component inspired by Ant Design, used for page loading state display."
    },
    "Slider": {
      "demosPath": "@lobehub/ui-rn/Slider/demos",
      "name": "Slider",
      "readme": "\n## Features\n\n- ✅ Smooth drag gesture interaction\n- ✅ Custom min, max, and step values\n- ✅ Mark support (marks)\n- ✅ Marks-only mode (step=null)\n- ✅ Controlled and uncontrolled modes\n- ✅ Complete accessibility support\n- ✅ Custom styling (track and thumb)\n- ✅ Disabled state support\n- ✅ TypeScript support\n- ✅ Theme adaptation (dark/light mode)\n\n## Basic Usage\n\n```tsx\nimport { Slider } from '@lobehub/ui-rn';\n\n// Basic usage\n<Slider\n  value={value}\n  onChange={setValue}\n  min={0}\n  max={100}\n  step={1}\n/>\n\n// Custom range and step\n<Slider\n  value={price}\n  onChange={setPrice}\n  min={100}\n  max={2000}\n  step={50}\n/>\n\n// Uncontrolled mode\n<Slider\n  defaultValue={30}\n  onChange={(value) => console.log('value:', value)}\n  min={0}\n  max={100}\n  step={5}\n/>\n\n// Disabled state\n<Slider\n  value={value}\n  onChange={setValue}\n  disabled\n  min={0}\n  max={100}\n/>\n\n// Custom styles\n<Slider\n  value={value}\n  onChange={setValue}\n  trackStyle={{ backgroundColor: '#ff6b35' }}\n  thumbStyle={{ backgroundColor: '#4ecdc4' }}\n/>\n\n// Marks\n<Slider\n  value={value}\n  onChange={setValue}\n  min={0}\n  max={100}\n  marks={{\n    0: '0%',\n    25: '25%',\n    50: '50%',\n    75: '75%',\n    100: '100%'\n  }}\n/>\n\n// Marks-only mode (can only select marked values)\n<Slider\n  value={level}\n  onChange={setLevel}\n  step={null}\n  marks={{\n    0: 'Low',\n    1: 'Medium',\n    2: 'High',\n    3: 'Very High'\n  }}\n/>\n```\n\n## Use Cases\n\n### Numeric Input\n\n- Volume control\n- Brightness adjustment\n- Price range selection\n- Temperature setting\n\n### Progress Control\n\n- Playback progress\n- Download progress\n- Task completion\n\n### Parameter Adjustment\n\n- Font size\n- Zoom ratio\n- Transparency setting\n\n## Accessibility Support\n\nThe component provides complete accessibility support:\n\n- `accessibilityRole=\"adjustable\"` identifies as adjustable component\n- `accessibilityValue` provides current value and range information\n- Supports screen readers\n- Supports custom accessibility labels and hints\n\n## Gesture Interaction\n\n- Uses react-native-gesture-handler for smooth drag experience\n- Supports precise position calculation and boundary restrictions\n- Real-time feedback and smooth animations\n- Auto-snap to step values\n\n## Theme Adaptation\n\nThe component uses the project's theme system for automatic adaptation:\n\n- Dark/light mode\n- Disabled state colors\n- Brand color scheme\n- Consistent design standards\n",
      "group": "Form",
      "title": "Slider",
      "description": "React Native slider input component supporting custom range, step, and smooth gesture interaction."
    },
    "Space": {
      "demosPath": "@lobehub/ui-rn/Space/demos",
      "name": "Space",
      "readme": "\n## Features\n\n- ✅ Horizontal and vertical spacing\n- ✅ Preset spacing sizes (small, middle, large)\n- ✅ Custom spacing values\n- ✅ Multiple alignment methods (start, center, end, baseline)\n- ✅ Auto-wrap support\n- ✅ Separator functionality\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Space } from '@lobehub/ui-rn';\n\n// Basic usage\n<Space>\n  <Component1 />\n  <Component2 />\n  <Component3 />\n</Space>\n\n// Vertical spacing\n<Space direction=\"vertical\">\n  <Component1 />\n  <Component2 />\n</Space>\n\n// Custom spacing size\n<Space size=\"large\">\n  <Component1 />\n  <Component2 />\n</Space>\n\n// Alignment\n<Space align=\"center\">\n  <Component1 />\n  <Component2 />\n</Space>\n```\n",
      "group": "Layout",
      "title": "Space",
      "description": "Set spacing between components, supporting horizontal/vertical layout, different alignment methods, and separators."
    },
    "Switch": {
      "demosPath": "@lobehub/ui-rn/Switch/demos",
      "name": "Switch",
      "readme": "\n## Basic Usage\n\nThe `Switch` provided by `@lobehub/ui-rn` has the same API as React Native:\n\n```tsx\nimport { Switch } from '@lobehub/ui-rn';\nimport React, { useState } from 'react';\n\nexport default function Demo() {\n  const [checked, setChecked] = useState(false);\n  return <Switch value={checked} onValueChange={setChecked} />;\n}\n```\n\n## Theme Colors\n\n- thumbColor: Uses `token.colorTextLightSolid`\n- trackColor: `false: token.colorBgContainerDisabled`, `true: token.colorPrimary`\n\nIf customization is needed, you can still override by passing the same-named props supported by React Native `Switch`.\n",
      "group": "Form",
      "title": "Switch",
      "description": "Lightweight wrapper of React Native Switch with built-in theme colors (thumb/track)."
    },
    "Tag": {
      "demosPath": "@lobehub/ui-rn/Tag/demos",
      "name": "Tag",
      "readme": "\n## Features\n\n- ✅ Simple tag design\n- ✅ Custom style support\n- ✅ Flexible text styling\n- ✅ Auto-wrap layout\n- ✅ TypeScript support\n- ✅ Theme adaptation\n\n## Basic Usage\n\n```tsx\nimport { Tag } from '@lobehub/ui-rn';\n\n// Basic usage\n<Tag>React</Tag>\n\n// Custom styles\n<Tag\n  style={{ backgroundColor: '#f0f2f5' }}\n  textStyle={{ color: '#1890ff' }}\n>\n  Custom Tag\n</Tag>\n\n// Multiple tags layout\n<View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 8 }}>\n  <Tag>React</Tag>\n  <Tag>TypeScript</Tag>\n  <Tag>JavaScript</Tag>\n</View>\n```\n\n## Style Customization\n\nThe Tag component supports complete style customization through `style` and `textStyle` props:\n\n- `style`: Controls tag container styles (background color, border, padding, etc.)\n- `textStyle`: Controls tag text styles (color, font size, weight, etc.)\n",
      "group": "Display",
      "title": "Tag",
      "description": "Small tag component for marking and classification with custom style support."
    },
    "Text": {
      "demosPath": "@lobehub/ui-rn/Text/demos",
      "name": "Text",
      "readme": "\n## When to Use\n\n- Display titles, paragraphs, and other text content\n- Semantic markup for text (success, warning, danger, etc.)\n- Text styling (bold, italic, underline, etc.)\n- Handle text overflow and ellipsis\n\n## Style Description\n\n### Tag Types (as)\n\n- `h1`: 38px, bold\n- `h2`: 30px, bold\n- `h3`: 24px, bold\n- `h4`: 20px, bold\n- `h5`: 16px, bold\n- `p`: 14px, normal\n\n### Semantic Types (type)\n\n- `secondary`: Secondary text color\n- `success`: Success color (green)\n- `warning`: Warning color (orange)\n- `danger`: Danger color (red)\n- `info`: Info color (blue)\n\n### Boolean Attributes\n\n- `strong`: Apply bold font weight\n- `italic`: Apply italic style\n- `underline`: Add underline\n- `delete`: Add strikethrough\n- `mark`: Add yellow background highlight\n- `code`: Apply code style (monospace font, light gray background)\n- `disabled`: Apply disabled style (light gray text)\n\n## Notes\n\n1. `as` and custom `fontSize` can be used together, custom value will override default\n2. `type` and custom `color` can be used together, custom value will override default\n3. `strong` and custom `weight` can be used together, custom value will override default\n4. `ellipsis` will automatically set `numberOfLines`, but explicitly set `numberOfLines` has higher priority\n5. Multiple boolean attributes can be combined (e.g., `strong` + `underline` + `italic`)\n",
      "group": "Basic",
      "title": "Text",
      "description": "Basic component for displaying text, providing rich styling and semantic options."
    },
    "ThemeProvider": {
      "demosPath": "@lobehub/ui-rn/ThemeProvider/demos",
      "name": "ThemeProvider",
      "readme": "\n## Features\n\n- 🎨 **Flexible Configuration** - Supports custom tokens and algorithms\n- 🌗 **Auto Adaptation** - Automatically adapts to light/dark mode\n- 🔧 **Algorithm Composition** - Supports combining multiple theme algorithms\n- 📱 **Mobile Optimized** - Optimized specifically for React Native\n- 🎯 **Type Safe** - Complete TypeScript support\n\n## Basic Usage\n\n```tsx\nimport { ThemeProvider } from '@lobehub/ui-rn';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <YourApp />\n    </ThemeProvider>\n  );\n}\n```\n\n## Custom Configuration\n\n### Custom Token\n\n```tsx\n<ThemeProvider\n  theme={{\n    token: {\n      colorPrimary: '#00b96b',\n      borderRadius: 2,\n    },\n  }}\n>\n  <YourApp />\n</ThemeProvider>\n```\n\n### Custom Algorithm\n\n```tsx\nimport { darkAlgorithm } from '@lobehub/ui-rn';\n\n<ThemeProvider\n  theme={{\n    algorithm: darkAlgorithm,\n  }}\n>\n  <YourApp />\n</ThemeProvider>;\n```\n\n### Combined Configuration\n\n```tsx\nimport { compactAlgorithm, darkAlgorithm } from '@lobehub/ui-rn';\n\n<ThemeProvider\n  theme={{\n    token: {\n      colorPrimary: '#ff6b35',\n      borderRadius: 2,\n    },\n    algorithm: [darkAlgorithm, compactAlgorithm],\n  }}\n>\n  <YourApp />\n</ThemeProvider>;\n```\n\n## Using Theme\n\n### useTheme Hook\n\n```tsx\nimport { useThemeToken } from '@lobehub/ui-rn';\n\nfunction MyComponent() {\n  const token = useThemeToken();\n\n  return (\n    <View\n      style={{\n        backgroundColor: token.colorBgContainer,\n        padding: token.padding,\n        borderRadius: token.borderRadius,\n      }}\n    >\n      <Text\n        style={{\n          color: token.colorText,\n          fontSize: token.fontSize,\n        }}\n      >\n        Hello Theme!\n      </Text>\n    </View>\n  );\n}\n```\n\n### useThemeMode Hook\n\n```tsx\nimport { useTheme } from '@lobehub/ui-rn';\n\nfunction ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <TouchableOpacity onPress={toggleTheme}>\n      <Text>Current mode: {theme.mode}</Text>\n    </TouchableOpacity>\n  );\n}\n```\n\n## Available Algorithms\n\n- `defaultAlgorithm` - Default light algorithm\n- `darkAlgorithm` - Dark algorithm\n- `compactAlgorithm` - Compact algorithm (smaller spacing)\n- `compactDarkAlgorithm` - Compact dark algorithm\n",
      "group": "Theme",
      "title": "ThemeProvider",
      "description": "React Native theme provider component based on Ant Design theme system, supporting fully customizable theme configuration."
    },
    "ThemeToken": {
      "demosPath": "@lobehub/ui-rn/ThemeToken/demos",
      "name": "ThemeToken",
      "readme": "\n## Features\n\n- ✅ Real-time theme token preview\n- ✅ Light/dark theme switching support\n- ✅ Adjustable primary color and neutral color\n- ✅ Display complete token JSON\n- ✅ Token value table display\n\n## Use Cases\n\n- Theme system debugging\n- Design token validation\n- Theme configuration reference\n",
      "group": "Theme",
      "title": "ThemeToken",
      "description": "Theme token display component for visualizing and testing various token values in the theme system."
    },
    "Toast": {
      "demosPath": "@lobehub/ui-rn/Toast/demos",
      "name": "Toast",
      "readme": "\n## Features\n\n- ✅ **Multiple Types** - Supports success, error, info, loading types\n- ✅ **Elegant Animation** - Smooth slide-in and slide-out animation effects\n- ✅ **Auto Dismiss** - Configurable auto-hide duration\n- ✅ **Manual Close** - Supports click-to-close and manual control\n- ✅ **Safe Area** - Auto-adapts to safe area, avoids status bar blocking\n- ✅ **Multi-instance Management** - Supports displaying multiple Toasts simultaneously\n- ✅ **Dark Theme** - Modern dark design style\n- ✅ **TypeScript** - Complete TypeScript type support\n- ✅ **Context API** - React Context-based state management\n- ✅ **Convenient API** - Simple and easy-to-use call interface\n\n## Basic Usage\n\n### 1. Setup ToastProvider\n\n```jsx\nimport { ToastProvider } from '@lobehub/ui-rn';\n\nexport default function App() {\n  return (\n    <ToastProvider>\n      {/* Your app content */}\n      <YourAppContent />\n    </ToastProvider>\n  );\n}\n```\n\n### 2. Use useToast Hook\n\n```jsx\nimport { useToast } from '@lobehub/ui-rn';\n\nexport default function MyComponent() {\n  const toast = useToast();\n\n  const showSuccess = () => {\n    toast.success('Operation successful!');\n  };\n\n  const showError = () => {\n    toast.error('Operation failed, please retry');\n  };\n\n  return (\n    <View>\n      <Button title=\"Success Message\" onPress={showSuccess} />\n      <Button title=\"Error Message\" onPress={showError} />\n    </View>\n  );\n}\n```\n\n## Use Cases\n\n1. **Success Feedback**: Confirmation prompt after successful operation\n2. **Error Message**: Warning for operation failure or exception\n3. **Info Notification**: Reminder for important information\n4. **Loading State**: Progress prompt for long-running operations\n\nFor more detailed information, please check the complete README documentation.\n",
      "group": "Feedback",
      "title": "Toast",
      "description": "Elegant React Native Toast notification component supporting multiple message types and animation effects."
    },
    "Tooltip": {
      "demosPath": "@lobehub/ui-rn/Tooltip/demos",
      "name": "Tooltip",
      "readme": "\n## Features\n\n- ✅ 12 placement options (top, bottom, left, right and their variants)\n- ✅ Smart position calculation and auto-adjustment\n- ✅ Multiple trigger modes (click, long press, controlled)\n- ✅ Smooth animation effects\n- ✅ Custom styles and content\n- ✅ Arrow pointer support\n- ✅ Screen boundary detection and position fallback\n- ✅ TypeScript support\n\n## Basic Usage\n\n```tsx\nimport { Tooltip } from '@lobehub/ui-rn';\n\n// Basic usage\n<Tooltip title=\"This is a tooltip message\">\n  <TouchableOpacity style={styles.button}>\n    <Text>Long press to show tooltip</Text>\n  </TouchableOpacity>\n</Tooltip>;\n```\n\n## Placement\n\nSupports 12 positions:\n\n```tsx\ntype TooltipPlacement =\n  | 'top'\n  | 'topLeft'\n  | 'topRight'\n  | 'bottom'\n  | 'bottomLeft'\n  | 'bottomRight'\n  | 'left'\n  | 'leftTop'\n  | 'leftBottom'\n  | 'right'\n  | 'rightTop'\n  | 'rightBottom';\n```\n\n## Trigger Modes\n\n```tsx\ntype TooltipTrigger = 'click' | 'longPress' | 'none';\n```\n",
      "group": "Feedback",
      "title": "Tooltip",
      "description": "Tooltip component inspired by Ant Design's Tooltip, providing fully-featured tooltip functionality for React Native applications."
    }
  },
  "groups": ["Basic", "Display", "Feedback", "Form", "Layout", "Navigation", "Overlay", "Theme"]
}
