---
description: 组件导入规范 - demos 和组件内部的导入路径规范
globs: src/components/**/*.tsx,src/components/**/*.ts
---

# 组件导入规范

本规范定义了 LobeChat Mobile 组件库中不同文件类型应该如何导入依赖。

## 规范概述

### 1. Demo 文件 (`demos/*.tsx`)

**✅ 正确做法：从 `@lobehub/ui-rn` 导入所有公开组件**

```tsx
// demos/basic.tsx
import { Button, Space, Text, useTheme } from '@lobehub/ui-rn';
import React from 'react';
import { View } from 'react-native';

export default () => {
  const token = useTheme();
  return (
    <Space gap={16}>
      <Button>示例按钮</Button>
      <Text>示例文本</Text>
    </Space>
  );
};
```

**❌ 错误做法：使用 `@/components` 路径**

```tsx
// ❌ 不要这样做
import Text from '@/components/Text';
import { useTheme } from '@/components/styles';
```

### 2. 组件主文件 (`ComponentName.tsx`)

**✅ 正确做法：使用相对路径引用其他组件**

```tsx
// Card/Card.tsx
import React from 'react';
import Block from '../Block';  // ✅ 相对路径
import Text from '../Text';    // ✅ 相对路径

import { useStyles } from './style';
import type { CardProps } from './type';
```

**❌ 错误做法：使用绝对路径 `@/components`**

```tsx
// ❌ 不要这样做
import Block from '@/components/Block';
import Text from '@/components/Text';
```

### 3. 样式文件 (`style.ts`)

**✅ 正确做法：使用 `@/components/styles` 导入主题工具**

```tsx
// style.ts
import { createStyles } from '@/components/styles';  // ✅ 允许

export const useStyles = createStyles(({ token, stylish }) => ({
  root: {
    backgroundColor: token.colorBgContainer,
  },
}));
```

### 4. 类型文件 (`type.ts`)

**✅ 正确做法：使用相对路径引用其他组件的类型**

```tsx
// Card/type.ts
import type { BlockProps } from '../Block';  // ✅ 相对路径
import type { ViewProps } from 'react-native';

export interface CardProps extends ViewProps {
  // ...
}
```

**❌ 错误做法：使用绝对路径**

```tsx
// ❌ 不要这样做
import type { BlockProps } from '@/components/Block';
```

## 导入顺序规范

遵循以下导入顺序：

```tsx
// 1. 外部库 - React 相关
import React, { useState, useCallback } from 'react';
import { View, Text } from 'react-native';

// 2. 外部库 - 第三方库
import { Lucide } from '@lobehub/ui';
import dayjs from 'dayjs';

// 3. 内部组件 (demos 使用 @lobehub/ui-rn)
import { Button, Space, Text, useTheme } from '@lobehub/ui-rn';

// 4. 相对路径导入 (组件内部使用)
import { useStyles } from './style';
import type { ComponentProps } from './type';
```

## 常见场景示例

### Demo 文件完整示例

```tsx
// demos/basic.tsx
import { Button, Space, Text } from '@lobehub/ui-rn';
import React from 'react';

export default () => {
  return (
    <Space gap={16}>
      <Button type="primary">主要按钮</Button>
      <Button type="default">默认按钮</Button>
    </Space>
  );
};
```

### 组件文件完整示例

```tsx
// Alert/index.tsx
import React, { memo } from 'react';
import { View } from 'react-native';

// 相对路径引用其他组件
import ActionIcon from '../ActionIcon';
import Icon from '../Icon';
import Text from '../Text';

// 本地文件
import { useStyles } from './style';
import type { AlertProps } from './type';

const Alert = memo<AlertProps>((props) => {
  // ...
});

export default Alert;
```

### 包含 Theme 的示例

```tsx
// demos/advanced.tsx
import { Button, Text, useTheme } from '@lobehub/ui-rn';  // ✅ 从 @lobehub/ui-rn 导入
import React from 'react';
import { View } from 'react-native';

export default () => {
  const token = useTheme();  // 使用主题 token

  return (
    <View style={{ padding: token.padding }}>
      <Text>示例内容</Text>
    </View>
  );
};
```

## 特殊情况

### 1. ThemeProvider 内部文件

ThemeProvider 模块内部可以使用绝对路径引用自己的子模块：

```tsx
// ThemeProvider/getDesignToken.ts
import { lightAlgorithm } from '@/components/styles/algorithm/light';  // ✅ 允许
import type { AliasToken } from '@/components/styles/interface';       // ✅ 允许
```

### 2. 工具函数和类型

非组件的工具文件可以使用 `@/components/styles`：

```tsx
// theme/createStyles.ts
import type { ThemeAppearance } from '@/components/ThemeProvider/types';  // ✅ 允许
```

## 验证命令

使用以下命令验证导入规范：

```bash
# 检查 demos 文件中的 @/components 引用（应该为 0）
find src/components -path "*/demos/*.tsx" -exec grep -l "@/components" {} \;

# 检查组件间的绝对路径引用（应该很少）
grep -r "from '@/components/[A-Z]" src/components --include="*.tsx" --exclude-dir="demos"
```

## 自动修复脚本

如果发现违反规范的导入，可以使用以下脚本修复：

```javascript
// fix-imports.js
const fs = require('fs');
const path = require('path');

// 检测并修复 demos 文件
function fixDemoImports(filePath) {
  let content = fs.readFileSync(filePath, 'utf-8');

  // 将 @/components/ComponentName 改为从 @lobehub/ui-rn 导入
  content = content.replace(
    /import\s+(\w+)\s+from\s+['"]@\/components\/(\w+)['"]/g,
    (match, name, component) => {
      // 添加到 @lobehub/ui-rn 导入中
      return `// import ${name} from '@lobehub/ui-rn'`;
    }
  );

  fs.writeFileSync(filePath, content);
}
```

## 常见错误和解决方案

### 错误 1: Demo 文件使用 `@/components`

```tsx
// ❌ 错误
import Text from '@/components/Text';

// ✅ 修复
import { Text } from '@lobehub/ui-rn';
```

### 错误 2: 组件文件使用绝对路径引用其他组件

```tsx
// ❌ 错误
import Block from '@/components/Block';

// ✅ 修复
import Block from '../Block';
```

### 错误 3: 重复导入

```tsx
// ❌ 错误
import { Button } from '@lobehub/ui-rn';
import Button from '../../Button';

// ✅ 修复 - 只保留一个
import { Button } from '@lobehub/ui-rn';  // demos 中
// 或
import Button from '../../Button';  // 组件内部
```

## 总结

| 文件类型 | 导入其他组件 | 导入 Theme | 示例 |
|---------|------------|-----------|------|
| `demos/*.tsx` | `@lobehub/ui-rn` | `@lobehub/ui-rn` | `import { Button, useTheme } from '@lobehub/ui-rn'` |
| `ComponentName.tsx` | 相对路径 | 相对路径或 `@/components/styles` | `import Block from '../Block'` |
| `style.ts` | - | `@/components/styles` | `import { createStyles } from '@/components/styles'` |
| `type.ts` | 相对路径（类型） | 相对路径（类型） | `import type { BlockProps } from '../Block'` |

**核心原则：**
- ✅ Demos 展示公开 API，使用 `@lobehub/ui-rn`
- ✅ 组件内部保持模块化，使用相对路径
- ✅ 样式文件可以使用 `@/components/styles` 获取主题工具
- ✅ 保持导入语句的一致性和清晰性
